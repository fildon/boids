!function(t){var e={};function i(n){if(e[n])return e[n].exports;var s=e[n]={i:n,l:!1,exports:{}};return t[n].call(s.exports,s,s.exports,i),s.l=!0,s.exports}i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)i.d(n,s,function(e){return t[e]}.bind(null,s));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=4)}([function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.config=void 0,e.config={boid:{alignmentRadius:40,alignmentRadiusDefault:40,attractionRadius:200,attractionRadiusDefault:200,defaultColour:"LightSteelBlue",fearDuration:30,maxSpeed:6,minSpeed:3,quantity:100,repulsionRadius:30,repulsionRadiusDefault:30,size:4,visionRadius:200},creature:{acceleration:.2,headingFuzz:.05,maxHistory:5,turningMax:.2},hunter:{defaultColour:"pink",eatRadius:20,maxSpeed:5,minSpeed:0,quantity:1,size:8,visionRadius:90},player:{maxSpeed:64,minSpeed:0},screen:{maxX:1e3,maxY:1e3}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Vector2=void 0;const n=i(0);class s{constructor(t=0,e=0){this.x=t%n.config.screen.maxX,this.y=e%n.config.screen.maxY,this.length=Math.sqrt(Math.pow(this.x,2)+Math.pow(this.y,2))}static average(t){if(0===t.length)return new s;return t.reduce((t,e)=>t.add(e)).scaleByScalar(1/t.length)}static fromHeadingAndSpeed(t,e){return e?new s(e*Math.cos(t),e*Math.sin(t)):new s(0,0)}unitVector(){return this.scaleByScalar(1/this.length)}distance(t){return this.vectorTo(t).length}vectorTo(t){let e=(t.x-this.x)%n.config.screen.maxX;e>n.config.screen.maxX/2&&(e-=n.config.screen.maxX),e<-n.config.screen.maxX/2&&(e+=n.config.screen.maxX);let i=(t.y-this.y)%n.config.screen.maxY;return i>n.config.screen.maxY/2&&(i-=n.config.screen.maxY),i<-n.config.screen.maxY/2&&(i+=n.config.screen.maxY),new s(e,i)}rotate(t){return new s(this.x*Math.cos(t)-this.y*Math.sin(t),this.x*Math.sin(t)+this.y*Math.cos(t))}angleTo(t){return Math.atan2(this.x*t.y-this.y*t.x,this.x*t.x+this.y*t.y)}add(t){return new s(this.x+t.x,this.y+t.y)}subtract(t){return new s(this.x-t.x,this.y-t.y)}equals(t){return this.x===t.x&&this.y===t.y}scaleByScalar(t){return new s(this.x*t,this.y*t)}scaleToLength(t){return this.length?this.scaleByScalar(t/this.length):this}isParallelTo(t){return this.x*t.y==this.y*t.x}normalize(){return 0<=this.x&&0<=this.y?this:new s((this.x%n.config.screen.maxX+n.config.screen.maxX)%n.config.screen.maxX,(this.y%n.config.screen.maxY+n.config.screen.maxY)%n.config.screen.maxY)}toHeading(){return Math.atan2(this.y,this.x)}toString(){return`[${this.x}, ${this.y}]`}}e.Vector2=s},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Creature=void 0;const n=i(1);e.Creature=class{distanceToCreature(t){return this.position.distance(t.position)}updateHistory(){this.history.push(this.position),this.history=this.history.slice(1)}velocity(){return n.Vector2.fromHeadingAndSpeed(this.heading,this.speed)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=i(1);e.default=class{constructor(t=new n.Vector2,e=0){this.vector=t,this.weight=e}static average(t){if(0===t.length)return new n.Vector2;const e=t.reduce((t,e)=>({vector:t.vector.add(e.vector.scaleByScalar(e.weight)),weight:t.weight+e.weight}),{vector:new n.Vector2,weight:0});return e.vector.scaleByScalar(1/e.weight)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=i(5);document.addEventListener("DOMContentLoaded",()=>{(new n.SimulationManager).runSimulation()},!1)},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SimulationManager=void 0;const n=i(6),s=i(0),r=i(8),o=i(9);e.SimulationManager=class{constructor(){this.fpsTarget=60;const t=document.getElementById("canvas");if(!t)throw new Error("couldn't find 'canvas' on document");this.canvas=new n.Canvas(t),this.inputHandler=new r.InputHandler(this.canvas,t=>this.createBoid(t),t=>this.createHunter(t)),this.creatureStorage=new o.CreatureStorage(this.inputHandler);for(let t=0;t<s.config.boid.quantity;t++)this.creatureStorage.addBoid();for(let t=0;t<s.config.hunter.quantity;t++)this.creatureStorage.addHunter()}createBoid(t){this.creatureStorage.addBoid(t)}createHunter(t){this.creatureStorage.addHunter(t)}runSimulation(){this.tick(performance.now(),0)}tick(t,e){const i=performance.now(),n=i-t;for(t=i,e+=n;e>=1e3/this.fpsTarget;)this.updateSimulation(),e-=1e3/this.fpsTarget;this.renderSimulation(),setTimeout(()=>this.tick(t,e),0)}updateSimulation(){this.creatureStorage.update();for(const t of this.creatureStorage.getAllBoids())t.update();for(const t of this.creatureStorage.getAllHunters())t.update()}renderSimulation(){this.canvas.draw(this.creatureStorage.getAllCreatures()),this.updateHunterCountDisplay(this.creatureStorage.getHunterCount()),this.updateBoidCountDisplay(this.creatureStorage.getBoidCount())}updateHunterCountDisplay(t){const e=document.getElementById("number-of-hunters");e&&(e.textContent=""+t)}updateBoidCountDisplay(t){const e=document.getElementById("number-of-boids");e&&(e.textContent=""+t)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Canvas=void 0;const n=i(0),s=i(1),r=i(7);e.Canvas=class{constructor(t){this.fpsCounter=r.FpsCounter.getFpsCounter(),this.cameraPosition=new s.Vector2(window.innerWidth,window.innerHeight),this.canvas=t;const e=this.canvas.getContext("2d");if(!e)throw new Error("could not get canvas context");this.ctx=e,this.canvas.height=n.config.screen.maxY,this.canvas.width=n.config.screen.maxX,this.setScreenSize()}onclick(t){this.canvas.onclick=t}setScreenSize(){window&&(n.config.screen.maxX=window.innerWidth,n.config.screen.maxY=window.innerHeight),this.ctx.canvas.width=n.config.screen.maxX,this.ctx.canvas.height=n.config.screen.maxY}draw(t,e=new s.Vector2(window.innerWidth/2,window.innerHeight/2)){this.cameraPosition=e,this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.setScreenSize(),this.drawGhosts(t),t.forEach(t=>{this.drawCreature(t)}),this.fpsCounter.countFrame(),this.fpsCounter.updateFps()}drawGhosts(t){if(n.config.creature.maxHistory)for(let e=0;e<n.config.creature.maxHistory;e++)t.forEach(t=>{this.drawGhost(t,e)})}drawGhost(t,e){this.drawCreatureBody(t,e)}drawCreature(t){this.drawCreatureBody(t),this.drawCreatureBeak(t)}getPositionInCameraSpace(t){return t.add(new s.Vector2(window.innerWidth/2,window.innerHeight/2)).subtract(this.cameraPosition).normalize()}getPositionInWorldSpace(t){return t.subtract(new s.Vector2(window.innerWidth/2,window.innerHeight/2)).add(this.cameraPosition).normalize()}drawCreatureBody(t,e){let i=e?t.history[e]:t.position;i=this.getPositionInCameraSpace(i);const s=e?t.size*((e+1)/(n.config.creature.maxHistory+1)):t.size;this.ctx.beginPath(),this.ctx.arc(i.x,i.y,s,0,2*Math.PI),this.ctx.fillStyle=t.colour,this.ctx.fill()}drawCreatureBeak(t){const e=this.getPositionInCameraSpace(t.position);this.ctx.beginPath(),this.ctx.arc(e.x+(t.size+1)*Math.cos(t.heading),e.y+(t.size+1)*Math.sin(t.heading),t.size/2,0,2*Math.PI),this.ctx.fillStyle="black",this.ctx.fill()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.FpsCounter=void 0;class n{constructor(){this.SECOND=1e3,this.recentFrames=[],this.fpsLabel=document.getElementById("fps-status"),this.start=performance.now()}static getFpsCounter(){return this.fpsCounter||(this.fpsCounter=new n)}countFrame(){this.recentFrames.push(performance.now())}getFPS(){const t=performance.now(),e=t-this.start<this.SECOND?Math.floor(1e3/(t-this.start)):1;return this.recentFrames.filter(e=>e>=t-this.SECOND).length*e}updateFps(){this.fpsLabel.textContent=this.getFPS().toString()}}e.FpsCounter=n},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.InputHandler=void 0;const n=i(1),s=i(0);e.InputHandler=class{constructor(t,e,i){this.left=!1,this.right=!1,this.up=!1,this.down=!1,this.canvas=t,this.createBoid=e,this.createHunter=i,this.separationLabel=document.getElementById("separation-status"),this.alignmentLabel=document.getElementById("alignment-status"),this.cohesionLabel=document.getElementById("cohesion-status"),this.canvas.onclick(t=>{this.handleMouseClick(t)}),window.addEventListener("keyup",t=>{this.handleKeyUp(t)}),window.addEventListener("keyup",t=>{this.setArrow(t.key,!1)}),window.addEventListener("keydown",t=>{this.setArrow(t.key,!0)})}handleMouseClick(t){const e=this.canvas.getPositionInWorldSpace(new n.Vector2(t.clientX,t.clientY));t.ctrlKey||t.metaKey?this.createHunter(e):this.createBoid(e)}handleKeyUp(t){switch(t.keyCode){case 49:this.toggleSeparation();break;case 50:this.toggleAlignment();break;case 51:this.toggleCohesion();break;default:return}}toggleSeparation(){s.config.boid.repulsionRadius?(s.config.boid.repulsionRadius=0,this.separationLabel.textContent="OFF",this.separationLabel.style.color="red"):(s.config.boid.repulsionRadius=s.config.boid.repulsionRadiusDefault,this.separationLabel.textContent="ON",this.separationLabel.style.color="green")}toggleAlignment(){s.config.boid.alignmentRadius?(s.config.boid.alignmentRadius=0,this.alignmentLabel.textContent="OFF",this.alignmentLabel.style.color="red"):(s.config.boid.alignmentRadius=s.config.boid.alignmentRadiusDefault,this.alignmentLabel.textContent="ON",this.alignmentLabel.style.color="green")}toggleCohesion(){s.config.boid.attractionRadius?(s.config.boid.attractionRadius=0,this.cohesionLabel.textContent="OFF",this.cohesionLabel.style.color="red"):(s.config.boid.attractionRadius=s.config.boid.attractionRadiusDefault,this.cohesionLabel.textContent="ON",this.cohesionLabel.style.color="green")}getHeadingUpdate(){return.1*(+this.right-+this.left)}getSpeedUpdate(){return.5*(+this.up-+this.down)}setArrow(t,e){switch(t){case"ArrowLeft":this.left=e;break;case"ArrowRight":this.right=e;break;case"ArrowUp":this.up=e;break;case"ArrowDown":this.down=e;break;default:return}}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CreatureStorage=void 0;const n=i(10),s=i(15),r=i(0),o=i(19);e.CreatureStorage=class{constructor(t){this.inputHandler=t,this.nextId=0,this.creatures=new Map,this.bucketMap=[],this.bucketColumns=1,this.bucketRows=1,this.bucketSize=100,this.update()}update(){this.resetBucketMap(),this.creatures.forEach(t=>{const e=Math.min(Math.floor(t.position.x/this.bucketSize),this.bucketColumns-1),i=Math.min(Math.floor(t.position.y/this.bucketSize),this.bucketRows-1);this.bucketMap[e][i].push(t)})}addHunter(t){const e=new n.Hunter(this.nextId,this,t);return this.creatures.set(this.nextId,e),this.nextId++,e}addBoid(t){const e=new s.Boid(this.nextId,this,t);return this.creatures.set(this.nextId,e),this.nextId++,e}addPlayerFish(){const t=new o.default(this.inputHandler);return this.creatures.set(this.nextId,t),this.nextId++,t}getAllHunters(){return[...this.creatures.values()].filter(t=>t instanceof n.Hunter)}getAllBoids(){return[...this.creatures.values()].filter(t=>t instanceof s.Boid)}getAllCreatures(){return[...this.creatures.values()]}getHuntersInArea(t,e){return this.getCreaturesInArea(t,e).filter(i=>i instanceof n.Hunter&&i.position.distance(t)<e)}getBoidsInArea(t,e){return this.getCreaturesInArea(t,e).filter(i=>i instanceof s.Boid&&i.position.distance(t)<e)}getBoidsOrPlayersInArea(t,e){return this.getCreaturesInArea(t,e).filter(i=>(i instanceof s.Boid||i instanceof o.default)&&i.position.distance(t)<e)}getCreaturesInArea(t,e){const i=Math.floor(t.x/this.bucketSize),n=Math.floor(t.y/this.bucketSize),s=Math.ceil(e/this.bucketSize),r=(i-s+this.bucketColumns)%this.bucketColumns,o=(i+s+1)%this.bucketColumns,a=(n-s+this.bucketRows)%this.bucketRows,c=(n+s+1)%this.bucketRows;let u=[];for(let t=r;t!==o;t++,t%=this.bucketColumns)for(let e=a;e!==c;e++,e%=this.bucketRows)u=u.concat(this.bucketMap[t][e]);return u}getHunterCount(){return this.getAllHunters().length}getBoidCount(){return this.getAllBoids().length}remove(t){this.creatures.delete(t)}resetBucketMap(){this.bucketMap=[],this.bucketColumns=Math.ceil(r.config.screen.maxX/this.bucketSize),this.bucketRows=Math.ceil(r.config.screen.maxY/this.bucketSize);for(let t=0;t<this.bucketColumns;t++){const t=[];for(let e=0;e<this.bucketRows;e++)t.push([]);this.bucketMap.push(t)}}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Hunter=void 0;const n=i(0),s=i(1),r=i(2),o=i(11);let a=(()=>{class t extends r.Creature{constructor(e=0,i,r){super(),this.id=e,this.creatureStorage=i,this.colour=n.config.hunter.defaultColour,this.maxSpeed=n.config.hunter.maxSpeed,this.minSpeed=n.config.hunter.minSpeed,this.size=n.config.hunter.size,this.heading=0,this.speed=0,this.history=[],this.position=r||new s.Vector2(Math.random()*n.config.screen.maxX,Math.random()*n.config.screen.maxY);for(let t=0;t<n.config.creature.maxHistory;t++)this.history.push(this.position);this.initializeVelocity(),this.net=new o.Net(t.netSizeSchema)}initializeVelocity(){this.heading=2*Math.random()*Math.PI,this.speed=n.config.hunter.minSpeed}update(){this.eat(),this.move(),this.updateHistory()}eat(){this.creatureStorage.getBoidsInArea(this.position,n.config.hunter.eatRadius).forEach(t=>t.die())}move(){this.updateHistory(),this.position=this.position.add(this.velocity()).normalize();const t=this.getNeuralNetInputVector(),e=this.net.processInput(t);this.parseOutputToAction(e)}getNeuralNetInputVector(){const t=this.creatureStorage.getAllBoids().sort((t,e)=>t.distanceToCreature(this)-e.distanceToCreature(this))[0],e=this.position.vectorTo(t.position);return[this.velocity().angleTo(e)/(2*Math.PI)+.5]}parseOutputToAction(t){const e=t[0],i=this.heading-n.config.creature.turningMax,s=2*n.config.creature.turningMax;this.heading=i+e*s;const r=t[1],o=this.speed-n.config.creature.acceleration+2*n.config.creature.acceleration*r;this.speed=Math.min(Math.max(o,0),n.config.hunter.maxSpeed)}}return t.netSizeSchema=[1,3,2],t})();e.Hunter=a},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Net=void 0;const n=i(12);e.Net=class{constructor(t){const e=new n.Layer(t[0]);this.layers=[e];let i=e;for(let e=1;e<t.length;e++){const s=new n.Layer(t[e]);s.connectPriorLayer(i),this.layers.push(s),i=s}}processInput(t){this.injectInputVectorToInputLayer(t);for(let t=1;t<this.layers.length;t++)this.layers[t].updateValues();return this.layers[this.layers.length-1].outputVector()}injectInputVectorToInputLayer(t){this.layers[0].injectInputVector(t)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Layer=void 0;const n=i(13);e.Layer=class{constructor(t){this.neurons=[];for(let e=0;e<t;e++)this.neurons.push(new n.Neuron)}connectPriorLayer(t){this.neurons.forEach(e=>{t.neurons.forEach(t=>{n.Neuron.connectPair(t,e)})})}injectInputVector(t){for(let e=0;e<t.length;e++)this.neurons[e].value=t[e]}updateValues(){this.neurons.forEach(t=>t.updateValue())}outputVector(){return this.neurons.map(t=>t.value)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Neuron=void 0;const n=i(14);e.Neuron=class{constructor(){this.inputs=[],this.outputs=[],this.value=0}connectOutput(t){this.outputs.push(t)}connectInput(t){this.inputs.push(t)}static connectPair(t,e){const i=new n.Connection(t,e);t.connectOutput(i),e.connectInput(i)}updateValue(){const t=this.inputs.reduce((t,e)=>t+e.getWeightedOutput(),0)/this.inputs.length;this.value=t<.5?0:1}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Connection=void 0;e.Connection=class{constructor(t,e,i=2*Math.random()){this.input=t,this.output=e,this.weight=i}getWeightedOutput(){return this.input.value*this.weight}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Boid=void 0;const n=i(0),s=i(1),r=i(16),o=i(18),a=i(3);class c extends o.BehaviourControlledCreature{constructor(){super(...arguments),this.defaultColour=n.config.boid.defaultColour,this.maxSpeed=n.config.boid.maxSpeed,this.minSpeed=n.config.boid.minSpeed,this.size=n.config.boid.size,this.fearCountdown=0,this.heading=2*Math.PI*Math.random(),this.speed=n.config.boid.maxSpeed,this.behaviours=[new r.Behaviour(()=>this.hunterEvasion(),()=>"red"),new r.Behaviour(()=>this.repulsion(),()=>this.fearCountdown?"red":"orange"),new r.Behaviour(()=>this.alignment(),()=>this.fearCountdown?"red":"blue"),new r.Behaviour(()=>this.attraction(),()=>this.fearCountdown?"red":"green")]}initializeVelocity(){this.heading=2*Math.random()*Math.PI,this.speed=n.config.boid.maxSpeed}update(){this.fearCountdown&&this.fearCountdown--,this.move()}hunterEvasion(){const t=this.creatureStorage.getHuntersInArea(this.position,n.config.boid.visionRadius);if(0===t.length)return new a.default;this.fearCountdown=n.config.boid.fearDuration;const e=this.nearestCreatureToPosition(t).position.vectorTo(this.position);return new a.default(e.scaleToLength(this.maxSpeed),100)}repulsion(){const t=this.creatureStorage.getBoidsOrPlayersInArea(this.position,n.config.boid.repulsionRadius).filter(t=>t!==this);if(0===t.length)return new a.default;const e=t.map(t=>t.position.vectorTo(this.position)).map(t=>new a.default(t,this.repulsionWeightFrom(t))),i=e.reduce((t,e)=>t+e.weight,0);return new a.default(a.default.average(e),i)}repulsionWeightFrom(t){const e=(n.config.boid.repulsionRadius-t.length)/n.config.boid.repulsionRadius;return Math.pow(e,2)*n.config.boid.repulsionRadius}alignment(){const t=this.creatureStorage.getBoidsOrPlayersInArea(this.position,n.config.boid.alignmentRadius).filter(t=>t!==this);if(0===t.length)return new a.default;const e=s.Vector2.average(t.map(t=>t.velocity()));return new a.default(this.fearCountdown?e.scaleToLength(this.maxSpeed):e,15)}attraction(){const t=this.creatureStorage.getBoidsOrPlayersInArea(this.position,n.config.boid.attractionRadius).filter(t=>t!==this);if(0===t.length)return new a.default;const e=this.nearestCreatureToPosition(t);return new a.default(this.position.vectorTo(e.position).scaleToLength(this.fearCountdown?this.maxSpeed:1.1*e.speed),10)}die(){this.creatureStorage.remove(this.id)}}e.Boid=c},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Behaviour=void 0;const n=i(17);e.Behaviour=class{constructor(t,e){this.getIdealWeightedHeading=t,this.getColor=e}getCurrentPriority(){const t=this.getIdealWeightedHeading();return t.weight>0?new n.Priority(t,this.getColor()):null}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Priority=void 0;e.Priority=class{constructor(t,e){this.weightedVector=t,this.color=e}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BehaviourControlledCreature=void 0;const n=i(0),s=i(1),r=i(2),o=i(3);class a extends r.Creature{constructor(t=0,e,i){super(),this.id=t,this.creatureStorage=e,this.colour="black",this.history=[],this.position=i||new s.Vector2(Math.random()*n.config.screen.maxX,Math.random()*n.config.screen.maxY);for(let t=0;t<n.config.creature.maxHistory;t++)this.history.push(this.position);this.initializeVelocity()}distanceToCreature(t){return this.position.distance(t.position)}move(){this.updateHistory(),this.position=this.position.add(this.velocity()).normalize(),this.updateHeading()}updateHeading(){const t=this.getCurrentPriorities().sort((t,e)=>e.weightedVector.weight-t.weightedVector.weight);0!==t.length?(this.colour=t[0].color,this.updateHeadingTowards(o.default.average(t.map(t=>t.weightedVector)))):this.defaultBehaviour()}getCurrentPriorities(){return this.behaviours.map(t=>t.getCurrentPriority()).filter(t=>t&&t.weightedVector.vector.length&&t.weightedVector.weight)}defaultBehaviour(){this.colour=this.defaultColour,this.speed=Math.max(this.velocity.length-n.config.creature.acceleration,this.minSpeed);const t=2*n.config.creature.turningMax*Math.random()-n.config.creature.turningMax;this.heading=this.heading+t}updateHeadingTowards(t){if(!t)return;let e=Math.max(Math.min(t.length,this.maxSpeed),this.minSpeed);e=Math.max(Math.min(e,this.speed+n.config.creature.acceleration),this.speed-n.config.creature.acceleration),this.speed=e;const i=this.velocity().angleTo(t),s=Math.max(Math.min(i,n.config.creature.turningMax),-n.config.creature.turningMax);this.heading=this.heading+s+2*n.config.creature.headingFuzz*Math.random()-n.config.creature.headingFuzz}nearestCreatureToPosition(t){if(0===t.length)throw new Error("Nearest creature is undefined for zero creatures");return t.reduce((t,e)=>{const i=this.position.vectorTo(e.position).length;return t.distance>i?{distance:i,nearest:e}:t},{distance:this.position.vectorTo(t[0].position).length,nearest:t[0]}).nearest}}e.BehaviourControlledCreature=a},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=i(1),s=i(2),r=i(0);class o extends s.Creature{constructor(t){super(),this.inputHandler=t,this.colour="black",this.size=6,this.heading=0,this.speed=0,this.history=[],this.position=new n.Vector2(window.innerWidth/2,window.innerHeight/2);for(let t=0;t<r.config.creature.maxHistory;t++)this.history.push(this.position)}update(){this.updateHistory(),this.heading+=this.inputHandler.getHeadingUpdate(),this.speed+=this.inputHandler.getSpeedUpdate(),this.speed=Math.max(Math.min(this.speed,r.config.player.maxSpeed),r.config.player.minSpeed),this.position=this.position.add(this.velocity()).normalize()}}e.default=o}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbmZpZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmVjdG9yMi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY3JlYXR1cmVzL2NyZWF0dXJlLnRzIiwid2VicGFjazovLy8uL3NyYy93ZWlnaHRlZFZlY3RvcjIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc2ltdWxhdGlvbk1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NhbnZhcy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZnBzQ291bnRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5wdXRIYW5kbGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9jcmVhdHVyZVN0b3JhZ2UudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NyZWF0dXJlcy9odW50ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL25ldXJhbC9uZXQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL25ldXJhbC9sYXllci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbmV1cmFsL25ldXJvbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbmV1cmFsL2Nvbm5lY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NyZWF0dXJlcy9ib2lkLnRzIiwid2VicGFjazovLy8uL3NyYy9jcmVhdHVyZXMvYmVoYXZpb3VyLnRzIiwid2VicGFjazovLy8uL3NyYy9jcmVhdHVyZXMvcHJpb3JpdHkudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NyZWF0dXJlcy9iZWhhdmlvdXJDb250cm9sbGVkQ3JlYXR1cmUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NyZWF0dXJlcy9wbGF5ZXJGaXNoLnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiY29uZmlnIiwiYm9pZCIsImFsaWdubWVudFJhZGl1cyIsImFsaWdubWVudFJhZGl1c0RlZmF1bHQiLCJhdHRyYWN0aW9uUmFkaXVzIiwiYXR0cmFjdGlvblJhZGl1c0RlZmF1bHQiLCJkZWZhdWx0Q29sb3VyIiwiZmVhckR1cmF0aW9uIiwibWF4U3BlZWQiLCJtaW5TcGVlZCIsInF1YW50aXR5IiwicmVwdWxzaW9uUmFkaXVzIiwicmVwdWxzaW9uUmFkaXVzRGVmYXVsdCIsInNpemUiLCJ2aXNpb25SYWRpdXMiLCJjcmVhdHVyZSIsImFjY2VsZXJhdGlvbiIsImhlYWRpbmdGdXp6IiwibWF4SGlzdG9yeSIsInR1cm5pbmdNYXgiLCJodW50ZXIiLCJlYXRSYWRpdXMiLCJwbGF5ZXIiLCJzY3JlZW4iLCJtYXhYIiwibWF4WSIsIlZlY3RvcjIiLCJ4IiwieSIsInRoaXMiLCJsZW5ndGgiLCJNYXRoIiwic3FydCIsInBvdyIsInZlY3RvcnMiLCJyZWR1Y2UiLCJwYXJ0aWFsU3VtIiwiY3VycmVudCIsImFkZCIsInNjYWxlQnlTY2FsYXIiLCJoZWFkaW5nIiwic3BlZWQiLCJjb3MiLCJzaW4iLCJ2IiwidmVjdG9yVG8iLCJ2ZWN0b3IiLCJuZWFyZXN0WCIsIm5lYXJlc3RZIiwicmFkaWFucyIsImF0YW4yIiwic2NhbGUiLCJwb3NpdGlvbiIsImRpc3RhbmNlIiwiaGlzdG9yeSIsInB1c2giLCJzbGljZSIsImZyb21IZWFkaW5nQW5kU3BlZWQiLCJ3ZWlnaHQiLCJ3ZWlnaHRlZFZlY3RvcnMiLCJ3ZWlnaHRlZEF2ZXJhZ2UiLCJwYXJ0aWFsIiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiU2ltdWxhdGlvbk1hbmFnZXIiLCJydW5TaW11bGF0aW9uIiwiZnBzVGFyZ2V0IiwiY2FudmFzRWxlbWVudCIsImdldEVsZW1lbnRCeUlkIiwiRXJyb3IiLCJjYW52YXMiLCJDYW52YXMiLCJpbnB1dEhhbmRsZXIiLCJJbnB1dEhhbmRsZXIiLCJjcmVhdGVCb2lkIiwiY3JlYXRlSHVudGVyIiwiY3JlYXR1cmVTdG9yYWdlIiwiQ3JlYXR1cmVTdG9yYWdlIiwiYWRkQm9pZCIsImFkZEh1bnRlciIsInRpY2siLCJwZXJmb3JtYW5jZSIsIm5vdyIsInByZXZpb3VzVGltZSIsImxhZyIsImN1cnJlbnRUaW1lIiwiZWxhcHNlZCIsInVwZGF0ZVNpbXVsYXRpb24iLCJyZW5kZXJTaW11bGF0aW9uIiwic2V0VGltZW91dCIsInVwZGF0ZSIsImdldEFsbEJvaWRzIiwiZ2V0QWxsSHVudGVycyIsImRyYXciLCJnZXRBbGxDcmVhdHVyZXMiLCJ1cGRhdGVIdW50ZXJDb3VudERpc3BsYXkiLCJnZXRIdW50ZXJDb3VudCIsInVwZGF0ZUJvaWRDb3VudERpc3BsYXkiLCJnZXRCb2lkQ291bnQiLCJjb3VudCIsImNvdW50RGlzcGxheSIsInRleHRDb250ZW50IiwiZnBzQ291bnRlciIsIkZwc0NvdW50ZXIiLCJnZXRGcHNDb3VudGVyIiwiY2FtZXJhUG9zaXRpb24iLCJ3aW5kb3ciLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJjb250ZXh0IiwiZ2V0Q29udGV4dCIsImN0eCIsImhlaWdodCIsIndpZHRoIiwic2V0U2NyZWVuU2l6ZSIsImNhbGxiYWNrIiwib25jbGljayIsImNyZWF0dXJlcyIsImNsZWFyUmVjdCIsImRyYXdHaG9zdHMiLCJmb3JFYWNoIiwiZHJhd0NyZWF0dXJlIiwiY291bnRGcmFtZSIsInVwZGF0ZUZwcyIsImRyYXdHaG9zdCIsImhpc3RvcnlJbmRleCIsImRyYXdDcmVhdHVyZUJvZHkiLCJkcmF3Q3JlYXR1cmVCZWFrIiwic3VidHJhY3QiLCJub3JtYWxpemUiLCJnZXRQb3NpdGlvbkluQ2FtZXJhU3BhY2UiLCJyYWRpdXMiLCJiZWdpblBhdGgiLCJhcmMiLCJQSSIsImZpbGxTdHlsZSIsImNvbG91ciIsImZpbGwiLCJTRUNPTkQiLCJyZWNlbnRGcmFtZXMiLCJmcHNMYWJlbCIsInN0YXJ0IiwibXVsdGlwbGllciIsImZsb29yIiwiZmlsdGVyIiwiZHJhd1RpbWUiLCJnZXRGUFMiLCJ0b1N0cmluZyIsImxlZnQiLCJyaWdodCIsInVwIiwiZG93biIsInNlcGFyYXRpb25MYWJlbCIsImFsaWdubWVudExhYmVsIiwiY29oZXNpb25MYWJlbCIsImV2ZW50IiwiaGFuZGxlTW91c2VDbGljayIsImhhbmRsZUtleVVwIiwic2V0QXJyb3ciLCJtb3VzZVBvc2l0aW9uIiwiZ2V0UG9zaXRpb25JbldvcmxkU3BhY2UiLCJjbGllbnRYIiwiY2xpZW50WSIsImN0cmxLZXkiLCJtZXRhS2V5Iiwia2V5Q29kZSIsInRvZ2dsZVNlcGFyYXRpb24iLCJ0b2dnbGVBbGlnbm1lbnQiLCJ0b2dnbGVDb2hlc2lvbiIsInN0eWxlIiwiY29sb3IiLCJuZXdTdGF0ZSIsIm5leHRJZCIsIk1hcCIsImJ1Y2tldE1hcCIsImJ1Y2tldENvbHVtbnMiLCJidWNrZXRSb3dzIiwiYnVja2V0U2l6ZSIsInJlc2V0QnVja2V0TWFwIiwiYnVja2V0WCIsIm1pbiIsImJ1Y2tldFkiLCJuZXdIdW50ZXIiLCJIdW50ZXIiLCJzZXQiLCJuZXdCb2lkIiwiQm9pZCIsIm5ld1BsYXllciIsInZhbHVlcyIsImNlbnRlciIsImdldENyZWF0dXJlc0luQXJlYSIsImJ1Y2tldFJhZGl1cyIsImNlaWwiLCJtaW5YIiwibWluWSIsImoiLCJjb25jYXQiLCJjcmVhdHVyZUlkIiwiZGVsZXRlIiwiYnVja2V0Um93IiwiQ3JlYXR1cmUiLCJpZCIsInN1cGVyIiwicmFuZG9tIiwiaW5pdGlhbGl6ZVZlbG9jaXR5IiwibmV0IiwiTmV0IiwibmV0U2l6ZVNjaGVtYSIsImVhdCIsIm1vdmUiLCJ1cGRhdGVIaXN0b3J5IiwiZ2V0Qm9pZHNJbkFyZWEiLCJwcmV5IiwiZGllIiwidmVsb2NpdHkiLCJpbnB1dFZlY3RvciIsImdldE5ldXJhbE5ldElucHV0VmVjdG9yIiwib3V0cHV0VmVjdG9yIiwicHJvY2Vzc0lucHV0IiwicGFyc2VPdXRwdXRUb0FjdGlvbiIsIm5lYXJlc3RCb2lkIiwic29ydCIsImEiLCJiIiwiZGlzdGFuY2VUb0NyZWF0dXJlIiwic2hvcnRlc3RQYXRoIiwiYW5nbGVUbyIsInJvdGF0aW9uRGVjaXNpb24iLCJtYXhpbXVtTGVmdCIsImZ1bGxUdXJuaW5nUmFuZ2UiLCJhY2NlbGVyYXRpb25EZWNpc2lvbiIsInRhcmdldFNwZWVkIiwibWF4IiwibGF5ZXJTaXplcyIsImlucHV0TGF5ZXIiLCJMYXllciIsImxheWVycyIsInByaW9yTGF5ZXIiLCJuZXh0TGF5ZXIiLCJjb25uZWN0UHJpb3JMYXllciIsImluamVjdElucHV0VmVjdG9yVG9JbnB1dExheWVyIiwidXBkYXRlVmFsdWVzIiwiaW5qZWN0SW5wdXRWZWN0b3IiLCJuZXVyb25zIiwiTmV1cm9uIiwibmV1cm9uIiwicHJpb3JOZXVyb24iLCJjb25uZWN0UGFpciIsInVwZGF0ZVZhbHVlIiwibWFwIiwiaW5wdXRzIiwib3V0cHV0cyIsImNvbm5lY3Rpb24iLCJwcmlvciIsIm5leHQiLCJDb25uZWN0aW9uIiwiY29ubmVjdE91dHB1dCIsImNvbm5lY3RJbnB1dCIsImF2ZXJhZ2VJbnB1dCIsInByZXYiLCJjdXJyIiwiZ2V0V2VpZ2h0ZWRPdXRwdXQiLCJpbnB1dCIsIm91dHB1dCIsIkJlaGF2aW91ckNvbnRyb2xsZWRDcmVhdHVyZSIsImZlYXJDb3VudGRvd24iLCJiZWhhdmlvdXJzIiwiQmVoYXZpb3VyIiwiaHVudGVyRXZhc2lvbiIsInJlcHVsc2lvbiIsImFsaWdubWVudCIsImF0dHJhY3Rpb24iLCJodW50ZXJzSW5TaWdodCIsImdldEh1bnRlcnNJbkFyZWEiLCJ2ZWN0b3JUb01lIiwibmVhcmVzdENyZWF0dXJlVG9Qb3NpdGlvbiIsInNjYWxlVG9MZW5ndGgiLCJuZWlnaGJvdXJzIiwiZ2V0Qm9pZHNPclBsYXllcnNJbkFyZWEiLCJyZXB1bHNpb25WZWN0b3JzIiwicmVwdWxzaW9uV2VpZ2h0RnJvbSIsInRvdGFsV2VpZ2h0IiwicGFydGlhbFdlaWdodCIsImF2ZXJhZ2UiLCJub3JtYWxpemVkSW50cnVzaW9uIiwiYXZlcmFnZUFsaWdubWVudFZlY3RvciIsIm5lYXJlc3ROZWlnaGJvdXIiLCJyZW1vdmUiLCJnZXRJZGVhbFdlaWdodGVkSGVhZGluZyIsImdldENvbG9yIiwid2VpZ2h0ZWRIZWFkaW5nIiwiUHJpb3JpdHkiLCJ3ZWlnaHRlZFZlY3RvciIsInVwZGF0ZUhlYWRpbmciLCJwcmlvcml0aWVzIiwiZ2V0Q3VycmVudFByaW9yaXRpZXMiLCJ1cGRhdGVIZWFkaW5nVG93YXJkcyIsInByaW9yaXR5IiwiZGVmYXVsdEJlaGF2aW91ciIsImJlaGF2aW91ciIsImdldEN1cnJlbnRQcmlvcml0eSIsInJhbmRvbVR1cm4iLCJsaW1pdGVkU3BlZWQiLCJpZGVhbFR1cm4iLCJsaW1pdGVkVHVybiIsInByZXZpb3VzIiwiY3VycmVudERpc3RhbmNlIiwibmVhcmVzdCIsIlBsYXllckZpc2giLCJnZXRIZWFkaW5nVXBkYXRlIiwiZ2V0U3BlZWRVcGRhdGUiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JV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TCxZQUFZckYsYUFqQzVCIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA0KTtcbiIsImV4cG9ydCBjb25zdCBjb25maWcgPSB7XHJcbiAgYm9pZDoge1xyXG4gICAgYWxpZ25tZW50UmFkaXVzOiA0MCxcclxuICAgIGFsaWdubWVudFJhZGl1c0RlZmF1bHQ6IDQwLFxyXG4gICAgYXR0cmFjdGlvblJhZGl1czogMjAwLFxyXG4gICAgYXR0cmFjdGlvblJhZGl1c0RlZmF1bHQ6IDIwMCxcclxuICAgIGRlZmF1bHRDb2xvdXI6IFwiTGlnaHRTdGVlbEJsdWVcIixcclxuICAgIGZlYXJEdXJhdGlvbjogMzAsXHJcbiAgICBtYXhTcGVlZDogNixcclxuICAgIG1pblNwZWVkOiAzLFxyXG4gICAgcXVhbnRpdHk6IDEwMCxcclxuICAgIHJlcHVsc2lvblJhZGl1czogMzAsXHJcbiAgICByZXB1bHNpb25SYWRpdXNEZWZhdWx0OiAzMCxcclxuICAgIHNpemU6IDQsXHJcbiAgICB2aXNpb25SYWRpdXM6IDIwMCxcclxuICB9LFxyXG4gIGNyZWF0dXJlOiB7XHJcbiAgICBhY2NlbGVyYXRpb246IDAuMixcclxuICAgIGhlYWRpbmdGdXp6OiAwLjA1LFxyXG4gICAgbWF4SGlzdG9yeTogNSxcclxuICAgIHR1cm5pbmdNYXg6IDAuMiwgLy8gcmFkaWFuc1xyXG4gIH0sXHJcbiAgaHVudGVyOiB7XHJcbiAgICBkZWZhdWx0Q29sb3VyOiBcInBpbmtcIixcclxuICAgIGVhdFJhZGl1czogMjAsXHJcbiAgICBtYXhTcGVlZDogNSxcclxuICAgIG1pblNwZWVkOiAwLFxyXG4gICAgcXVhbnRpdHk6IDEsXHJcbiAgICBzaXplOiA4LFxyXG4gICAgdmlzaW9uUmFkaXVzOiA5MCxcclxuICB9LFxyXG4gIHBsYXllcjoge1xyXG4gICAgbWF4U3BlZWQ6IDY0LFxyXG4gICAgbWluU3BlZWQ6IDAsXHJcbiAgfSxcclxuICBzY3JlZW46IHtcclxuICAgIC8vIG1heFggYW5kIG1heFkgYXJlIG92ZXJ3cml0dGVuIGF0IHJ1biB0aW1lXHJcbiAgICAvLyBhY2NvcmRpbmcgdG8gYWN0dWFsIHNjcmVlbiBzaXplXHJcbiAgICBtYXhYOiAxMDAwLFxyXG4gICAgbWF4WTogMTAwMCxcclxuICB9LFxyXG59O1xyXG4iLCJpbXBvcnQgeyBjb25maWcgfSBmcm9tIFwiLi9jb25maWdcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBWZWN0b3IyIHtcclxuICBwdWJsaWMgc3RhdGljIGF2ZXJhZ2UodmVjdG9yczogVmVjdG9yMltdKTogVmVjdG9yMiB7XHJcbiAgICBpZiAodmVjdG9ycy5sZW5ndGggPT09IDApIHtcclxuICAgICAgcmV0dXJuIG5ldyBWZWN0b3IyKCk7XHJcbiAgICB9XHJcbiAgICBjb25zdCB0b3RhbFZlY3RvciA9IHZlY3RvcnMucmVkdWNlKChwYXJ0aWFsU3VtLCBjdXJyZW50KSA9PiB7XHJcbiAgICAgIHJldHVybiBwYXJ0aWFsU3VtLmFkZChjdXJyZW50KTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiB0b3RhbFZlY3Rvci5zY2FsZUJ5U2NhbGFyKDEgLyB2ZWN0b3JzLmxlbmd0aCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIGZyb21IZWFkaW5nQW5kU3BlZWQoaGVhZGluZzogbnVtYmVyLCBzcGVlZDogbnVtYmVyKTogVmVjdG9yMiB7XHJcbiAgICBpZiAoIXNwZWVkKSB7XHJcbiAgICAgIHJldHVybiBuZXcgVmVjdG9yMigwLCAwKTtcclxuICAgIH1cclxuICAgIHJldHVybiBuZXcgVmVjdG9yMihcclxuICAgICAgc3BlZWQgKiBNYXRoLmNvcyhoZWFkaW5nKSxcclxuICAgICAgc3BlZWQgKiBNYXRoLnNpbihoZWFkaW5nKSxcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgeDogbnVtYmVyO1xyXG4gIHB1YmxpYyB5OiBudW1iZXI7XHJcbiAgcHVibGljIGxlbmd0aDogbnVtYmVyO1xyXG4gIGNvbnN0cnVjdG9yKHg6IG51bWJlciA9IDAsIHk6IG51bWJlciA9IDApIHtcclxuICAgIHRoaXMueCA9IHggJSBjb25maWcuc2NyZWVuLm1heFg7XHJcbiAgICB0aGlzLnkgPSB5ICUgY29uZmlnLnNjcmVlbi5tYXhZO1xyXG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLnNxcnQoTWF0aC5wb3codGhpcy54LCAyKSArIE1hdGgucG93KHRoaXMueSwgMikpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHVuaXRWZWN0b3IoKTogVmVjdG9yMiB7XHJcbiAgICByZXR1cm4gdGhpcy5zY2FsZUJ5U2NhbGFyKDEgLyB0aGlzLmxlbmd0aCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZGlzdGFuY2UodjogVmVjdG9yMik6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy52ZWN0b3JUbyh2KS5sZW5ndGg7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgdmVjdG9yVG8odmVjdG9yOiBWZWN0b3IyKTogVmVjdG9yMiB7XHJcbiAgICBsZXQgbmVhcmVzdFggPSAodmVjdG9yLnggLSB0aGlzLngpICUgY29uZmlnLnNjcmVlbi5tYXhYO1xyXG4gICAgaWYgKG5lYXJlc3RYID4gKGNvbmZpZy5zY3JlZW4ubWF4WCAvIDIpKSB7XHJcbiAgICAgIG5lYXJlc3RYIC09IGNvbmZpZy5zY3JlZW4ubWF4WDtcclxuICAgIH1cclxuICAgIGlmIChuZWFyZXN0WCA8IC0oY29uZmlnLnNjcmVlbi5tYXhYIC8gMikpIHtcclxuICAgICAgbmVhcmVzdFggKz0gY29uZmlnLnNjcmVlbi5tYXhYO1xyXG4gICAgfVxyXG4gICAgbGV0IG5lYXJlc3RZID0gKHZlY3Rvci55IC0gdGhpcy55KSAlIGNvbmZpZy5zY3JlZW4ubWF4WTtcclxuICAgIGlmIChuZWFyZXN0WSA+IChjb25maWcuc2NyZWVuLm1heFkgLyAyKSkge1xyXG4gICAgICBuZWFyZXN0WSAtPSBjb25maWcuc2NyZWVuLm1heFk7XHJcbiAgICB9XHJcbiAgICBpZiAobmVhcmVzdFkgPCAtKGNvbmZpZy5zY3JlZW4ubWF4WSAvIDIpKSB7XHJcbiAgICAgIG5lYXJlc3RZICs9IGNvbmZpZy5zY3JlZW4ubWF4WTtcclxuICAgIH1cclxuICAgIHJldHVybiBuZXcgVmVjdG9yMihuZWFyZXN0WCwgbmVhcmVzdFkpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHJvdGF0ZShyYWRpYW5zOiBudW1iZXIpOiBWZWN0b3IyIHtcclxuICAgIHJldHVybiBuZXcgVmVjdG9yMihcclxuICAgICAgdGhpcy54ICogTWF0aC5jb3MocmFkaWFucykgLSB0aGlzLnkgKiBNYXRoLnNpbihyYWRpYW5zKSxcclxuICAgICAgdGhpcy54ICogTWF0aC5zaW4ocmFkaWFucykgKyB0aGlzLnkgKiBNYXRoLmNvcyhyYWRpYW5zKSxcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvLyBNZWFzdXJlcyBhbnRpIGNsb2Nrd2lzZSBmcm9tIC1QSSB0byBQSVxyXG4gIHB1YmxpYyBhbmdsZVRvKHY6IFZlY3RvcjIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIE1hdGguYXRhbjIoXHJcbiAgICAgIHRoaXMueCAqIHYueSAtIHRoaXMueSAqIHYueCxcclxuICAgICAgdGhpcy54ICogdi54ICsgdGhpcy55ICogdi55LFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhZGQodjogVmVjdG9yMik6IFZlY3RvcjIge1xyXG4gICAgcmV0dXJuIG5ldyBWZWN0b3IyKHRoaXMueCArIHYueCwgdGhpcy55ICsgdi55KTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdWJ0cmFjdCh2OiBWZWN0b3IyKTogVmVjdG9yMiB7XHJcbiAgICByZXR1cm4gbmV3IFZlY3RvcjIodGhpcy54IC0gdi54LCB0aGlzLnkgLSB2LnkpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGVxdWFscyh2OiBWZWN0b3IyKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy54ID09PSB2LnggJiYgdGhpcy55ID09PSB2Lnk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc2NhbGVCeVNjYWxhcihzY2FsZTogbnVtYmVyKTogVmVjdG9yMiB7XHJcbiAgICByZXR1cm4gbmV3IFZlY3RvcjIodGhpcy54ICogc2NhbGUsIHRoaXMueSAqIHNjYWxlKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzY2FsZVRvTGVuZ3RoKGxlbmd0aDogbnVtYmVyKTogVmVjdG9yMiB7XHJcbiAgICByZXR1cm4gdGhpcy5sZW5ndGggP1xyXG4gICAgICB0aGlzLnNjYWxlQnlTY2FsYXIobGVuZ3RoIC8gdGhpcy5sZW5ndGgpIDpcclxuICAgICAgdGhpcztcclxuICB9XHJcblxyXG4gIHB1YmxpYyBpc1BhcmFsbGVsVG8odjogVmVjdG9yMik6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMueCAqIHYueSA9PT0gdGhpcy55ICogdi54O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG5vcm1hbGl6ZSgpOiBWZWN0b3IyIHtcclxuICAgIGlmICgwIDw9IHRoaXMueCAmJlxyXG4gICAgICAwIDw9IHRoaXMueSkge1xyXG4gICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIHJldHVybiBuZXcgVmVjdG9yMihcclxuICAgICAgKCh0aGlzLnggJSBjb25maWcuc2NyZWVuLm1heFgpICsgY29uZmlnLnNjcmVlbi5tYXhYKSAlIGNvbmZpZy5zY3JlZW4ubWF4WCxcclxuICAgICAgKCh0aGlzLnkgJSBjb25maWcuc2NyZWVuLm1heFkpICsgY29uZmlnLnNjcmVlbi5tYXhZKSAlIGNvbmZpZy5zY3JlZW4ubWF4WSxcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgdG9IZWFkaW5nKCkge1xyXG4gICAgcmV0dXJuIE1hdGguYXRhbjIodGhpcy55LCB0aGlzLngpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHRvU3RyaW5nKCkge1xyXG4gICAgcmV0dXJuIGBbJHt0aGlzLnh9LCAke3RoaXMueX1dYDtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gXCIuLi92ZWN0b3IyXCI7XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ3JlYXR1cmUge1xyXG4gIHB1YmxpYyBhYnN0cmFjdCBwb3NpdGlvbjogVmVjdG9yMjtcclxuICBwdWJsaWMgYWJzdHJhY3QgaGVhZGluZzogbnVtYmVyO1xyXG4gIHB1YmxpYyBhYnN0cmFjdCBzcGVlZDogbnVtYmVyO1xyXG4gIHB1YmxpYyBhYnN0cmFjdCBoaXN0b3J5OiBWZWN0b3IyW107XHJcbiAgcHVibGljIGFic3RyYWN0IGNvbG91cjogc3RyaW5nO1xyXG4gIHB1YmxpYyBhYnN0cmFjdCBzaXplOiBudW1iZXI7XHJcblxyXG4gIHB1YmxpYyBkaXN0YW5jZVRvQ3JlYXR1cmUoY3JlYXR1cmU6IENyZWF0dXJlKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLnBvc2l0aW9uLmRpc3RhbmNlKGNyZWF0dXJlLnBvc2l0aW9uKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhYnN0cmFjdCB1cGRhdGUoKTogdm9pZDtcclxuXHJcbiAgcHVibGljIHVwZGF0ZUhpc3RvcnkoKSB7XHJcbiAgICB0aGlzLmhpc3RvcnkucHVzaCh0aGlzLnBvc2l0aW9uKTtcclxuICAgIHRoaXMuaGlzdG9yeSA9IHRoaXMuaGlzdG9yeS5zbGljZSgxKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyB2ZWxvY2l0eSgpIHtcclxuICAgIHJldHVybiBWZWN0b3IyLmZyb21IZWFkaW5nQW5kU3BlZWQodGhpcy5oZWFkaW5nLCB0aGlzLnNwZWVkKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gXCIuL3ZlY3RvcjJcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdlaWdodGVkVmVjdG9yMiB7XHJcbiAgcHVibGljIHN0YXRpYyBhdmVyYWdlKHdlaWdodGVkVmVjdG9yczogV2VpZ2h0ZWRWZWN0b3IyW10pOiBWZWN0b3IyIHtcclxuICAgIGlmICh3ZWlnaHRlZFZlY3RvcnMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHJldHVybiBuZXcgVmVjdG9yMigpO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgd2VpZ2h0ZWRBdmVyYWdlID0gd2VpZ2h0ZWRWZWN0b3JzLnJlZHVjZSgocGFydGlhbCwgY3VycmVudCkgPT4ge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHZlY3RvcjogcGFydGlhbC52ZWN0b3IuYWRkKGN1cnJlbnQudmVjdG9yLnNjYWxlQnlTY2FsYXIoY3VycmVudC53ZWlnaHQpKSxcclxuICAgICAgICB3ZWlnaHQ6IHBhcnRpYWwud2VpZ2h0ICsgY3VycmVudC53ZWlnaHQsXHJcbiAgICAgIH07XHJcbiAgICB9LCB7XHJcbiAgICAgIHZlY3RvcjogbmV3IFZlY3RvcjIoKSxcclxuICAgICAgd2VpZ2h0OiAwLFxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHdlaWdodGVkQXZlcmFnZS52ZWN0b3Iuc2NhbGVCeVNjYWxhcigxIC8gd2VpZ2h0ZWRBdmVyYWdlLndlaWdodCk7XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHB1YmxpYyB2ZWN0b3I6IFZlY3RvcjIgPSBuZXcgVmVjdG9yMigpLFxyXG4gICAgcHVibGljIHdlaWdodDogbnVtYmVyID0gMCxcclxuICApIHt9XHJcbn1cclxuIiwiaW1wb3J0IHsgU2ltdWxhdGlvbk1hbmFnZXIgfSBmcm9tIFwiLi9zaW11bGF0aW9uTWFuYWdlclwiO1xyXG5cclxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgKCkgPT4ge1xyXG4gIG5ldyBTaW11bGF0aW9uTWFuYWdlcigpLnJ1blNpbXVsYXRpb24oKTtcclxufSwgZmFsc2UpO1xyXG4iLCJpbXBvcnQgeyBDYW52YXMgfSBmcm9tIFwiLi9jYW52YXNcIjtcclxuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSBcIi4vY29uZmlnXCI7XHJcbmltcG9ydCB7IElucHV0SGFuZGxlciB9IGZyb20gXCIuL2lucHV0SGFuZGxlclwiO1xyXG5pbXBvcnQgeyBDcmVhdHVyZVN0b3JhZ2UgfSBmcm9tIFwiLi9jcmVhdHVyZVN0b3JhZ2VcIjtcclxuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gXCIuL3ZlY3RvcjJcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBTaW11bGF0aW9uTWFuYWdlciB7XHJcbiAgcHJpdmF0ZSBjYW52YXM6IENhbnZhcztcclxuICBwcml2YXRlIGlucHV0SGFuZGxlcjogSW5wdXRIYW5kbGVyO1xyXG4gIHByaXZhdGUgY3JlYXR1cmVTdG9yYWdlOiBDcmVhdHVyZVN0b3JhZ2U7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBmcHNUYXJnZXQgPSA2MDtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIGNvbnN0IGNhbnZhc0VsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKSBhcyBIVE1MQ2FudmFzRWxlbWVudDtcclxuICAgIGlmICghY2FudmFzRWxlbWVudCkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjb3VsZG4ndCBmaW5kICdjYW52YXMnIG9uIGRvY3VtZW50XCIpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5jYW52YXMgPSBuZXcgQ2FudmFzKGNhbnZhc0VsZW1lbnQpO1xyXG4gICAgdGhpcy5pbnB1dEhhbmRsZXIgPSBuZXcgSW5wdXRIYW5kbGVyKFxyXG4gICAgICB0aGlzLmNhbnZhcyxcclxuICAgICAgKHBvc2l0aW9uOiBWZWN0b3IyKSA9PiB0aGlzLmNyZWF0ZUJvaWQocG9zaXRpb24pLFxyXG4gICAgICAocG9zaXRpb246IFZlY3RvcjIpID0+IHRoaXMuY3JlYXRlSHVudGVyKHBvc2l0aW9uKSxcclxuICAgICk7XHJcblxyXG4gICAgdGhpcy5jcmVhdHVyZVN0b3JhZ2UgPSBuZXcgQ3JlYXR1cmVTdG9yYWdlKHRoaXMuaW5wdXRIYW5kbGVyKTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29uZmlnLmJvaWQucXVhbnRpdHk7IGkrKykge1xyXG4gICAgICB0aGlzLmNyZWF0dXJlU3RvcmFnZS5hZGRCb2lkKCk7XHJcbiAgICB9XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbmZpZy5odW50ZXIucXVhbnRpdHk7IGkrKykge1xyXG4gICAgICB0aGlzLmNyZWF0dXJlU3RvcmFnZS5hZGRIdW50ZXIoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHB1YmxpYyBjcmVhdGVCb2lkKHBvc2l0aW9uPzogVmVjdG9yMikge1xyXG4gICAgdGhpcy5jcmVhdHVyZVN0b3JhZ2UuYWRkQm9pZChwb3NpdGlvbik7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgY3JlYXRlSHVudGVyKHBvc2l0aW9uPzogVmVjdG9yMikge1xyXG4gICAgdGhpcy5jcmVhdHVyZVN0b3JhZ2UuYWRkSHVudGVyKHBvc2l0aW9uKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBydW5TaW11bGF0aW9uKCk6IHZvaWQge1xyXG4gICAgdGhpcy50aWNrKHBlcmZvcm1hbmNlLm5vdygpLCAwKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyB0aWNrKHByZXZpb3VzVGltZTogbnVtYmVyLCBsYWc6IG51bWJlcik6IHZvaWQge1xyXG4gICAgY29uc3QgY3VycmVudFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcclxuICAgIGNvbnN0IGVsYXBzZWQgPSBjdXJyZW50VGltZSAtIHByZXZpb3VzVGltZTtcclxuICAgIHByZXZpb3VzVGltZSA9IGN1cnJlbnRUaW1lO1xyXG4gICAgbGFnICs9IGVsYXBzZWQ7XHJcblxyXG4gICAgd2hpbGUgKGxhZyA+PSAxMDAwIC8gdGhpcy5mcHNUYXJnZXQpIHtcclxuICAgICAgdGhpcy51cGRhdGVTaW11bGF0aW9uKCk7XHJcbiAgICAgIGxhZyAtPSAxMDAwIC8gdGhpcy5mcHNUYXJnZXQ7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5yZW5kZXJTaW11bGF0aW9uKCk7XHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMudGljayhwcmV2aW91c1RpbWUsIGxhZyksIDApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHVwZGF0ZVNpbXVsYXRpb24oKTogdm9pZCB7XHJcbiAgICB0aGlzLmNyZWF0dXJlU3RvcmFnZS51cGRhdGUoKTtcclxuICAgIGZvciAoY29uc3QgYm9pZCBvZiB0aGlzLmNyZWF0dXJlU3RvcmFnZS5nZXRBbGxCb2lkcygpKSB7XHJcbiAgICAgIGJvaWQudXBkYXRlKCk7XHJcbiAgICB9XHJcbiAgICBmb3IgKGNvbnN0IGh1bnRlciBvZiB0aGlzLmNyZWF0dXJlU3RvcmFnZS5nZXRBbGxIdW50ZXJzKCkpIHtcclxuICAgICAgaHVudGVyLnVwZGF0ZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIHJlbmRlclNpbXVsYXRpb24oKTogdm9pZCB7XHJcbiAgICB0aGlzLmNhbnZhcy5kcmF3KFxyXG4gICAgICB0aGlzLmNyZWF0dXJlU3RvcmFnZS5nZXRBbGxDcmVhdHVyZXMoKSxcclxuICAgICk7XHJcbiAgICB0aGlzLnVwZGF0ZUh1bnRlckNvdW50RGlzcGxheShcclxuICAgICAgdGhpcy5jcmVhdHVyZVN0b3JhZ2UuZ2V0SHVudGVyQ291bnQoKSxcclxuICAgICk7XHJcbiAgICB0aGlzLnVwZGF0ZUJvaWRDb3VudERpc3BsYXkoXHJcbiAgICAgIHRoaXMuY3JlYXR1cmVTdG9yYWdlLmdldEJvaWRDb3VudCgpLFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgdXBkYXRlSHVudGVyQ291bnREaXNwbGF5KGNvdW50OiBudW1iZXIpIHtcclxuICAgIGNvbnN0IGNvdW50RGlzcGxheSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibnVtYmVyLW9mLWh1bnRlcnNcIik7XHJcbiAgICBpZiAoY291bnREaXNwbGF5KSB7XHJcbiAgICAgIGNvdW50RGlzcGxheS50ZXh0Q29udGVudCA9IGAke2NvdW50fWA7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHVwZGF0ZUJvaWRDb3VudERpc3BsYXkoY291bnQ6IG51bWJlcikge1xyXG4gICAgY29uc3QgY291bnREaXNwbGF5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJudW1iZXItb2YtYm9pZHNcIik7XHJcbiAgICBpZiAoY291bnREaXNwbGF5KSB7XHJcbiAgICAgIGNvdW50RGlzcGxheS50ZXh0Q29udGVudCA9IGAke2NvdW50fWA7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IGNvbmZpZyB9IGZyb20gXCIuL2NvbmZpZ1wiO1xyXG5pbXBvcnQgeyBDcmVhdHVyZSB9IGZyb20gXCIuL2NyZWF0dXJlcy9jcmVhdHVyZVwiO1xyXG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSBcIi4vdmVjdG9yMlwiO1xyXG5pbXBvcnQgeyBGcHNDb3VudGVyIH0gZnJvbSBcIi4vZnBzQ291bnRlclwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIENhbnZhcyB7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBmcHNDb3VudGVyOiBGcHNDb3VudGVyO1xyXG4gIHByaXZhdGUgY2FtZXJhUG9zaXRpb246IFZlY3RvcjI7XHJcbiAgcHJpdmF0ZSBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50O1xyXG4gIHByaXZhdGUgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQ7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGNhbnZhc0VsZW1lbnQ6IEhUTUxDYW52YXNFbGVtZW50KSB7XHJcbiAgICB0aGlzLmZwc0NvdW50ZXIgPSBGcHNDb3VudGVyLmdldEZwc0NvdW50ZXIoKTtcclxuICAgIHRoaXMuY2FtZXJhUG9zaXRpb24gPSBuZXcgVmVjdG9yMih3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KTtcclxuICAgIHRoaXMuY2FudmFzID0gY2FudmFzRWxlbWVudDtcclxuICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XHJcbiAgICBpZiAoIWNvbnRleHQpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY291bGQgbm90IGdldCBjYW52YXMgY29udGV4dFwiKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuY3R4ID0gY29udGV4dDtcclxuICAgIH1cclxuICAgIHRoaXMuY2FudmFzLmhlaWdodCA9IGNvbmZpZy5zY3JlZW4ubWF4WTtcclxuICAgIHRoaXMuY2FudmFzLndpZHRoID0gY29uZmlnLnNjcmVlbi5tYXhYO1xyXG5cclxuICAgIHRoaXMuc2V0U2NyZWVuU2l6ZSgpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG9uY2xpY2soY2FsbGJhY2s6ICgoZXY6IE1vdXNlRXZlbnQpID0+IGFueSkpIHtcclxuICAgIHRoaXMuY2FudmFzLm9uY2xpY2sgPSBjYWxsYmFjaztcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZXRTY3JlZW5TaXplKCk6IHZvaWQge1xyXG4gICAgaWYgKHdpbmRvdykge1xyXG4gICAgICBjb25maWcuc2NyZWVuLm1heFggPSB3aW5kb3cuaW5uZXJXaWR0aDtcclxuICAgICAgY29uZmlnLnNjcmVlbi5tYXhZID0gd2luZG93LmlubmVySGVpZ2h0O1xyXG4gICAgfVxyXG4gICAgdGhpcy5jdHguY2FudmFzLndpZHRoID0gY29uZmlnLnNjcmVlbi5tYXhYO1xyXG4gICAgdGhpcy5jdHguY2FudmFzLmhlaWdodCA9IGNvbmZpZy5zY3JlZW4ubWF4WTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBkcmF3KFxyXG4gICAgY3JlYXR1cmVzOiBDcmVhdHVyZVtdLFxyXG4gICAgY2FtZXJhUG9zaXRpb246IFZlY3RvcjIgPSBuZXcgVmVjdG9yMih3aW5kb3cuaW5uZXJXaWR0aCAvIDIsIHdpbmRvdy5pbm5lckhlaWdodCAvIDIpLFxyXG4gICk6IHZvaWQge1xyXG4gICAgdGhpcy5jYW1lcmFQb3NpdGlvbiA9IGNhbWVyYVBvc2l0aW9uO1xyXG4gICAgdGhpcy5jdHguY2xlYXJSZWN0KDAsIDAsIHRoaXMuY2FudmFzLndpZHRoLCB0aGlzLmNhbnZhcy5oZWlnaHQpO1xyXG4gICAgdGhpcy5zZXRTY3JlZW5TaXplKCk7XHJcbiAgICB0aGlzLmRyYXdHaG9zdHMoY3JlYXR1cmVzKTtcclxuICAgIGNyZWF0dXJlcy5mb3JFYWNoKChjcmVhdHVyZSkgPT4ge1xyXG4gICAgICB0aGlzLmRyYXdDcmVhdHVyZShjcmVhdHVyZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLmZwc0NvdW50ZXIuY291bnRGcmFtZSgpO1xyXG4gICAgdGhpcy5mcHNDb3VudGVyLnVwZGF0ZUZwcygpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGRyYXdHaG9zdHMoY3JlYXR1cmVzOiBDcmVhdHVyZVtdKSB7XHJcbiAgICBpZiAoIWNvbmZpZy5jcmVhdHVyZS5tYXhIaXN0b3J5KSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29uZmlnLmNyZWF0dXJlLm1heEhpc3Rvcnk7IGkrKykge1xyXG4gICAgICBjcmVhdHVyZXMuZm9yRWFjaCgoY3JlYXR1cmUpID0+IHtcclxuICAgICAgICB0aGlzLmRyYXdHaG9zdChjcmVhdHVyZSwgaSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGRyYXdHaG9zdChjcmVhdHVyZTogQ3JlYXR1cmUsIGhpc3RvcnlJbmRleDogbnVtYmVyKSB7XHJcbiAgICB0aGlzLmRyYXdDcmVhdHVyZUJvZHkoY3JlYXR1cmUsIGhpc3RvcnlJbmRleCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZHJhd0NyZWF0dXJlKGNyZWF0dXJlOiBDcmVhdHVyZSk6IHZvaWQge1xyXG4gICAgdGhpcy5kcmF3Q3JlYXR1cmVCb2R5KGNyZWF0dXJlKTtcclxuICAgIHRoaXMuZHJhd0NyZWF0dXJlQmVhayhjcmVhdHVyZSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0UG9zaXRpb25JbkNhbWVyYVNwYWNlKHBvc2l0aW9uOiBWZWN0b3IyKTogVmVjdG9yMiB7XHJcbiAgICByZXR1cm4gcG9zaXRpb25cclxuICAgICAgLmFkZChuZXcgVmVjdG9yMih3aW5kb3cuaW5uZXJXaWR0aCAvIDIsIHdpbmRvdy5pbm5lckhlaWdodCAvIDIpKVxyXG4gICAgICAuc3VidHJhY3QodGhpcy5jYW1lcmFQb3NpdGlvbilcclxuICAgICAgLm5vcm1hbGl6ZSgpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldFBvc2l0aW9uSW5Xb3JsZFNwYWNlKHBvc2l0aW9uOiBWZWN0b3IyKTogVmVjdG9yMiB7XHJcbiAgICByZXR1cm4gcG9zaXRpb25cclxuICAgICAgLnN1YnRyYWN0KG5ldyBWZWN0b3IyKHdpbmRvdy5pbm5lcldpZHRoIC8gMiwgd2luZG93LmlubmVySGVpZ2h0IC8gMikpXHJcbiAgICAgIC5hZGQodGhpcy5jYW1lcmFQb3NpdGlvbilcclxuICAgICAgLm5vcm1hbGl6ZSgpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGRyYXdDcmVhdHVyZUJvZHkoY3JlYXR1cmU6IENyZWF0dXJlLCBoaXN0b3J5SW5kZXg/OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIGxldCBwb3NpdGlvbiA9IGhpc3RvcnlJbmRleCA/IGNyZWF0dXJlLmhpc3RvcnlbaGlzdG9yeUluZGV4XSA6IGNyZWF0dXJlLnBvc2l0aW9uO1xyXG4gICAgcG9zaXRpb24gPSB0aGlzLmdldFBvc2l0aW9uSW5DYW1lcmFTcGFjZShwb3NpdGlvbik7XHJcbiAgICBjb25zdCByYWRpdXMgPSBoaXN0b3J5SW5kZXggP1xyXG4gICAgICBjcmVhdHVyZS5zaXplICogKChoaXN0b3J5SW5kZXggKyAxKSAvIChjb25maWcuY3JlYXR1cmUubWF4SGlzdG9yeSArIDEpKSA6XHJcbiAgICAgIGNyZWF0dXJlLnNpemU7XHJcbiAgICB0aGlzLmN0eC5iZWdpblBhdGgoKTtcclxuICAgIHRoaXMuY3R4LmFyYyhcclxuICAgICAgcG9zaXRpb24ueCxcclxuICAgICAgcG9zaXRpb24ueSxcclxuICAgICAgcmFkaXVzLFxyXG4gICAgICAwLCAyICogTWF0aC5QSSk7XHJcbiAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSBjcmVhdHVyZS5jb2xvdXI7XHJcbiAgICB0aGlzLmN0eC5maWxsKCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZHJhd0NyZWF0dXJlQmVhayhjcmVhdHVyZTogQ3JlYXR1cmUpOiB2b2lkIHtcclxuICAgIGNvbnN0IHBvc2l0aW9uID0gdGhpcy5nZXRQb3NpdGlvbkluQ2FtZXJhU3BhY2UoY3JlYXR1cmUucG9zaXRpb24pO1xyXG4gICAgdGhpcy5jdHguYmVnaW5QYXRoKCk7XHJcbiAgICB0aGlzLmN0eC5hcmMoXHJcbiAgICAgIHBvc2l0aW9uLnggKyAoY3JlYXR1cmUuc2l6ZSArIDEpICogTWF0aC5jb3MoY3JlYXR1cmUuaGVhZGluZyksXHJcbiAgICAgIHBvc2l0aW9uLnkgKyAoY3JlYXR1cmUuc2l6ZSArIDEpICogTWF0aC5zaW4oY3JlYXR1cmUuaGVhZGluZyksXHJcbiAgICAgIGNyZWF0dXJlLnNpemUgLyAyLCAwLCAyICogTWF0aC5QSSk7XHJcbiAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSBcImJsYWNrXCI7XHJcbiAgICB0aGlzLmN0eC5maWxsKCk7XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBjbGFzcyBGcHNDb3VudGVyIHtcbiAgcHVibGljIHN0YXRpYyBnZXRGcHNDb3VudGVyKCk6IEZwc0NvdW50ZXIge1xuICAgIHJldHVybiB0aGlzLmZwc0NvdW50ZXIgfHwgKHRoaXMuZnBzQ291bnRlciA9IG5ldyBGcHNDb3VudGVyKCkpO1xuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgZnBzQ291bnRlcjogRnBzQ291bnRlcjtcbiAgcHJpdmF0ZSByZWFkb25seSBTRUNPTkQgPSAxMDAwO1xuXG4gIHByaXZhdGUgZnBzTGFiZWw6IEhUTUxFbGVtZW50O1xuICBwcml2YXRlIHJlY2VudEZyYW1lczogbnVtYmVyW10gPSBbXTtcbiAgcHJpdmF0ZSBzdGFydDogbnVtYmVyO1xuXG4gIHByaXZhdGUgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5mcHNMYWJlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZnBzLXN0YXR1c1wiKSE7XG4gICAgdGhpcy5zdGFydCA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICB9XG5cbiAgcHVibGljIGNvdW50RnJhbWUoKTogdm9pZCB7XG4gICAgdGhpcy5yZWNlbnRGcmFtZXMucHVzaChwZXJmb3JtYW5jZS5ub3coKSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0RlBTKCk6IG51bWJlciB7XG4gICAgY29uc3QgY3VycmVudFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICBjb25zdCBtdWx0aXBsaWVyID0gY3VycmVudFRpbWUgLSB0aGlzLnN0YXJ0IDwgdGhpcy5TRUNPTkQgP1xuICAgICAgTWF0aC5mbG9vcigxMDAwIC8gKGN1cnJlbnRUaW1lIC0gdGhpcy5zdGFydCkpIDpcbiAgICAgIDE7XG4gICAgcmV0dXJuIHRoaXMucmVjZW50RnJhbWVzLmZpbHRlcihcbiAgICAgIChkcmF3VGltZTogbnVtYmVyKSA9PiBkcmF3VGltZSA+PSBjdXJyZW50VGltZSAtIHRoaXMuU0VDT05ELFxuICAgICkubGVuZ3RoICogbXVsdGlwbGllcjtcbiAgfVxuXG4gIHB1YmxpYyB1cGRhdGVGcHMoKTogdm9pZCB7XG4gICAgdGhpcy5mcHNMYWJlbC50ZXh0Q29udGVudCA9IHRoaXMuZ2V0RlBTKCkudG9TdHJpbmcoKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gXCIuL3ZlY3RvcjJcIjtcclxuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSBcIi4vY29uZmlnXCI7XHJcbmltcG9ydCB7IENhbnZhcyB9IGZyb20gXCIuL2NhbnZhc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIElucHV0SGFuZGxlciB7XHJcbiAgcHJpdmF0ZSBjYW52YXM6IENhbnZhcztcclxuICBwcml2YXRlIGNyZWF0ZUJvaWQ6IChwb3NpdGlvbjogVmVjdG9yMikgPT4gdm9pZDtcclxuICBwcml2YXRlIGNyZWF0ZUh1bnRlcjogKHBvc2l0aW9uOiBWZWN0b3IyKSA9PiB2b2lkO1xyXG4gIHByaXZhdGUgc2VwYXJhdGlvbkxhYmVsOiBIVE1MRWxlbWVudDtcclxuICBwcml2YXRlIGFsaWdubWVudExhYmVsOiBIVE1MRWxlbWVudDtcclxuICBwcml2YXRlIGNvaGVzaW9uTGFiZWw6IEhUTUxFbGVtZW50O1xyXG5cclxuICBwcml2YXRlIGxlZnQgPSBmYWxzZTtcclxuICBwcml2YXRlIHJpZ2h0ID0gZmFsc2U7XHJcbiAgcHJpdmF0ZSB1cCA9IGZhbHNlO1xyXG4gIHByaXZhdGUgZG93biA9IGZhbHNlO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIGNhbnZhczogQ2FudmFzLFxyXG4gICAgY3JlYXRlQm9pZDogKHBvc2l0aW9uOiBWZWN0b3IyKSA9PiB2b2lkLFxyXG4gICAgY3JlYXRlSHVudGVyOiAocG9zaXRpb246IFZlY3RvcjIpID0+IHZvaWQsXHJcbiAgKSB7XHJcbiAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcclxuICAgIHRoaXMuY3JlYXRlQm9pZCA9IGNyZWF0ZUJvaWQ7XHJcbiAgICB0aGlzLmNyZWF0ZUh1bnRlciA9IGNyZWF0ZUh1bnRlcjtcclxuICAgIHRoaXMuc2VwYXJhdGlvbkxhYmVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzZXBhcmF0aW9uLXN0YXR1c1wiKSE7XHJcbiAgICB0aGlzLmFsaWdubWVudExhYmVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhbGlnbm1lbnQtc3RhdHVzXCIpITtcclxuICAgIHRoaXMuY29oZXNpb25MYWJlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY29oZXNpb24tc3RhdHVzXCIpITtcclxuICAgIHRoaXMuY2FudmFzLm9uY2xpY2soKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB7XHJcbiAgICAgIHRoaXMuaGFuZGxlTW91c2VDbGljayhldmVudCk7XHJcbiAgICB9KTtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgKGV2ZW50OiBLZXlib2FyZEV2ZW50KSA9PiB7XHJcbiAgICAgIHRoaXMuaGFuZGxlS2V5VXAoZXZlbnQpO1xyXG4gICAgfSk7XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIChldmVudCkgPT4ge1xyXG4gICAgICB0aGlzLnNldEFycm93KGV2ZW50LmtleSwgZmFsc2UpO1xyXG4gICAgfSk7XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgKGV2ZW50KSA9PiB7XHJcbiAgICAgIHRoaXMuc2V0QXJyb3coZXZlbnQua2V5LCB0cnVlKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGhhbmRsZU1vdXNlQ2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQpIHtcclxuICAgIGNvbnN0IG1vdXNlUG9zaXRpb24gPSB0aGlzLmNhbnZhcy5nZXRQb3NpdGlvbkluV29ybGRTcGFjZShcclxuICAgICAgbmV3IFZlY3RvcjIoXHJcbiAgICAgICAgZXZlbnQuY2xpZW50WCxcclxuICAgICAgICBldmVudC5jbGllbnRZLFxyXG4gICAgICApLFxyXG4gICAgKTtcclxuICAgIGlmIChldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXkpIHtcclxuICAgICAgdGhpcy5jcmVhdGVIdW50ZXIobW91c2VQb3NpdGlvbik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmNyZWF0ZUJvaWQobW91c2VQb3NpdGlvbik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgaGFuZGxlS2V5VXAoZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcclxuICAgIGNvbnN0IG9uZUtleUNvZGUgPSA0OTtcclxuICAgIGNvbnN0IHR3b0tleUNvZGUgPSA1MDtcclxuICAgIGNvbnN0IHRocmVlS2V5Q29kZSA9IDUxO1xyXG4gICAgc3dpdGNoIChldmVudC5rZXlDb2RlKSB7XHJcbiAgICAgIGNhc2Ugb25lS2V5Q29kZTogdGhpcy50b2dnbGVTZXBhcmF0aW9uKCk7IGJyZWFrO1xyXG4gICAgICBjYXNlIHR3b0tleUNvZGU6IHRoaXMudG9nZ2xlQWxpZ25tZW50KCk7IGJyZWFrO1xyXG4gICAgICBjYXNlIHRocmVlS2V5Q29kZTogdGhpcy50b2dnbGVDb2hlc2lvbigpOyBicmVhaztcclxuICAgICAgZGVmYXVsdDogcmV0dXJuO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIHRvZ2dsZVNlcGFyYXRpb24oKSB7XHJcbiAgICBpZiAoY29uZmlnLmJvaWQucmVwdWxzaW9uUmFkaXVzKSB7XHJcbiAgICAgIGNvbmZpZy5ib2lkLnJlcHVsc2lvblJhZGl1cyA9IDA7XHJcbiAgICAgIHRoaXMuc2VwYXJhdGlvbkxhYmVsLnRleHRDb250ZW50ID0gXCJPRkZcIjtcclxuICAgICAgdGhpcy5zZXBhcmF0aW9uTGFiZWwuc3R5bGUuY29sb3IgPSBcInJlZFwiO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uZmlnLmJvaWQucmVwdWxzaW9uUmFkaXVzID0gY29uZmlnLmJvaWQucmVwdWxzaW9uUmFkaXVzRGVmYXVsdDtcclxuICAgICAgdGhpcy5zZXBhcmF0aW9uTGFiZWwudGV4dENvbnRlbnQgPSBcIk9OXCI7XHJcbiAgICAgIHRoaXMuc2VwYXJhdGlvbkxhYmVsLnN0eWxlLmNvbG9yID0gXCJncmVlblwiO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIHRvZ2dsZUFsaWdubWVudCgpIHtcclxuICAgIGlmIChjb25maWcuYm9pZC5hbGlnbm1lbnRSYWRpdXMpIHtcclxuICAgICAgY29uZmlnLmJvaWQuYWxpZ25tZW50UmFkaXVzID0gMDtcclxuICAgICAgdGhpcy5hbGlnbm1lbnRMYWJlbC50ZXh0Q29udGVudCA9IFwiT0ZGXCI7XHJcbiAgICAgIHRoaXMuYWxpZ25tZW50TGFiZWwuc3R5bGUuY29sb3IgPSBcInJlZFwiO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uZmlnLmJvaWQuYWxpZ25tZW50UmFkaXVzID0gY29uZmlnLmJvaWQuYWxpZ25tZW50UmFkaXVzRGVmYXVsdDtcclxuICAgICAgdGhpcy5hbGlnbm1lbnRMYWJlbC50ZXh0Q29udGVudCA9IFwiT05cIjtcclxuICAgICAgdGhpcy5hbGlnbm1lbnRMYWJlbC5zdHlsZS5jb2xvciA9IFwiZ3JlZW5cIjtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHB1YmxpYyB0b2dnbGVDb2hlc2lvbigpIHtcclxuICAgIGlmIChjb25maWcuYm9pZC5hdHRyYWN0aW9uUmFkaXVzKSB7XHJcbiAgICAgIGNvbmZpZy5ib2lkLmF0dHJhY3Rpb25SYWRpdXMgPSAwO1xyXG4gICAgICB0aGlzLmNvaGVzaW9uTGFiZWwudGV4dENvbnRlbnQgPSBcIk9GRlwiO1xyXG4gICAgICB0aGlzLmNvaGVzaW9uTGFiZWwuc3R5bGUuY29sb3IgPSBcInJlZFwiO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uZmlnLmJvaWQuYXR0cmFjdGlvblJhZGl1cyA9IGNvbmZpZy5ib2lkLmF0dHJhY3Rpb25SYWRpdXNEZWZhdWx0O1xyXG4gICAgICB0aGlzLmNvaGVzaW9uTGFiZWwudGV4dENvbnRlbnQgPSBcIk9OXCI7XHJcbiAgICAgIHRoaXMuY29oZXNpb25MYWJlbC5zdHlsZS5jb2xvciA9IFwiZ3JlZW5cIjtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRIZWFkaW5nVXBkYXRlKCkge1xyXG4gICAgcmV0dXJuIDAuMSAqICgrdGhpcy5yaWdodCAtICt0aGlzLmxlZnQpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldFNwZWVkVXBkYXRlKCkge1xyXG4gICAgcmV0dXJuIDAuNSAqICgrdGhpcy51cCAtICt0aGlzLmRvd24pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzZXRBcnJvdyhrZXk6IHN0cmluZywgbmV3U3RhdGU6IGJvb2xlYW4pIHtcclxuICAgIHN3aXRjaCAoa2V5KSB7XHJcbiAgICAgIGNhc2UgXCJBcnJvd0xlZnRcIjpcclxuICAgICAgICB0aGlzLmxlZnQgPSBuZXdTdGF0ZTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSBcIkFycm93UmlnaHRcIjpcclxuICAgICAgICB0aGlzLnJpZ2h0ID0gbmV3U3RhdGU7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgXCJBcnJvd1VwXCI6XHJcbiAgICAgICAgdGhpcy51cCA9IG5ld1N0YXRlO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIFwiQXJyb3dEb3duXCI6XHJcbiAgICAgICAgdGhpcy5kb3duID0gbmV3U3RhdGU7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgIH1cclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQ3JlYXR1cmUgfSBmcm9tIFwiLi9jcmVhdHVyZXMvY3JlYXR1cmVcIjtcclxuaW1wb3J0IHsgSHVudGVyIH0gZnJvbSBcIi4vY3JlYXR1cmVzL2h1bnRlclwiO1xyXG5pbXBvcnQgeyBCb2lkIH0gZnJvbSBcIi4vY3JlYXR1cmVzL2JvaWRcIjtcclxuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gXCIuL3ZlY3RvcjJcIjtcclxuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSBcIi4vY29uZmlnXCI7XHJcbmltcG9ydCBQbGF5ZXJGaXNoIGZyb20gXCIuL2NyZWF0dXJlcy9wbGF5ZXJGaXNoXCI7XHJcbmltcG9ydCB7IElucHV0SGFuZGxlciB9IGZyb20gXCIuL2lucHV0SGFuZGxlclwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIENyZWF0dXJlU3RvcmFnZSB7XHJcbiAgcHJpdmF0ZSBuZXh0SWQgPSAwO1xyXG4gIHByaXZhdGUgY3JlYXR1cmVzID0gbmV3IE1hcDxudW1iZXIsIENyZWF0dXJlPigpO1xyXG4gIHByaXZhdGUgYnVja2V0TWFwOiBDcmVhdHVyZVtdW11bXSA9IFtdO1xyXG4gIHByaXZhdGUgYnVja2V0Q29sdW1uczogbnVtYmVyID0gMTtcclxuICBwcml2YXRlIGJ1Y2tldFJvd3M6IG51bWJlciA9IDE7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBidWNrZXRTaXplID0gMTAwO1xyXG5cclxuICBjb25zdHJ1Y3RvcihwdWJsaWMgaW5wdXRIYW5kbGVyOiBJbnB1dEhhbmRsZXIpIHtcclxuICAgIHRoaXMudXBkYXRlKCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgdXBkYXRlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5yZXNldEJ1Y2tldE1hcCgpO1xyXG4gICAgdGhpcy5jcmVhdHVyZXMuZm9yRWFjaCgoY3JlYXR1cmUpID0+IHtcclxuICAgICAgY29uc3QgYnVja2V0WCA9IE1hdGgubWluKFxyXG4gICAgICAgIE1hdGguZmxvb3IoY3JlYXR1cmUucG9zaXRpb24ueCAvIHRoaXMuYnVja2V0U2l6ZSksXHJcbiAgICAgICAgdGhpcy5idWNrZXRDb2x1bW5zIC0gMSxcclxuICAgICAgKTtcclxuICAgICAgY29uc3QgYnVja2V0WSA9IE1hdGgubWluKFxyXG4gICAgICAgIE1hdGguZmxvb3IoY3JlYXR1cmUucG9zaXRpb24ueSAvIHRoaXMuYnVja2V0U2l6ZSksXHJcbiAgICAgICAgdGhpcy5idWNrZXRSb3dzIC0gMSxcclxuICAgICAgKTtcclxuICAgICAgdGhpcy5idWNrZXRNYXBbYnVja2V0WF1bYnVja2V0WV0ucHVzaChjcmVhdHVyZSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhZGRIdW50ZXIocG9zaXRpb24/OiBWZWN0b3IyKTogSHVudGVyIHtcclxuICAgIGNvbnN0IG5ld0h1bnRlciA9IG5ldyBIdW50ZXIoXHJcbiAgICAgIHRoaXMubmV4dElkLFxyXG4gICAgICB0aGlzLFxyXG4gICAgICBwb3NpdGlvbixcclxuICAgICk7XHJcbiAgICB0aGlzLmNyZWF0dXJlcy5zZXQodGhpcy5uZXh0SWQsIG5ld0h1bnRlcik7XHJcbiAgICB0aGlzLm5leHRJZCsrO1xyXG4gICAgcmV0dXJuIG5ld0h1bnRlcjtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhZGRCb2lkKHBvc2l0aW9uPzogVmVjdG9yMik6IEJvaWQge1xyXG4gICAgY29uc3QgbmV3Qm9pZCA9IG5ldyBCb2lkKFxyXG4gICAgICB0aGlzLm5leHRJZCxcclxuICAgICAgdGhpcyxcclxuICAgICAgcG9zaXRpb24sXHJcbiAgICApO1xyXG4gICAgdGhpcy5jcmVhdHVyZXMuc2V0KHRoaXMubmV4dElkLCBuZXdCb2lkKTtcclxuICAgIHRoaXMubmV4dElkKys7XHJcbiAgICByZXR1cm4gbmV3Qm9pZDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhZGRQbGF5ZXJGaXNoKCkge1xyXG4gICAgY29uc3QgbmV3UGxheWVyID0gbmV3IFBsYXllckZpc2goXHJcbiAgICAgIHRoaXMuaW5wdXRIYW5kbGVyLFxyXG4gICAgKTtcclxuICAgIHRoaXMuY3JlYXR1cmVzLnNldCh0aGlzLm5leHRJZCwgbmV3UGxheWVyKTtcclxuICAgIHRoaXMubmV4dElkKys7XHJcbiAgICByZXR1cm4gbmV3UGxheWVyO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldEFsbEh1bnRlcnMoKTogSHVudGVyW10ge1xyXG4gICAgcmV0dXJuIFsuLi50aGlzLmNyZWF0dXJlcy52YWx1ZXMoKV0uZmlsdGVyKChjcmVhdHVyZSkgPT4ge1xyXG4gICAgICByZXR1cm4gY3JlYXR1cmUgaW5zdGFuY2VvZiBIdW50ZXI7XHJcbiAgICB9KSBhcyBIdW50ZXJbXTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRBbGxCb2lkcygpOiBCb2lkW10ge1xyXG4gICAgcmV0dXJuIFsuLi50aGlzLmNyZWF0dXJlcy52YWx1ZXMoKV0uZmlsdGVyKChjcmVhdHVyZSkgPT4ge1xyXG4gICAgICByZXR1cm4gY3JlYXR1cmUgaW5zdGFuY2VvZiBCb2lkO1xyXG4gICAgfSkgYXMgQm9pZFtdO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldEFsbENyZWF0dXJlcygpOiBDcmVhdHVyZVtdIHtcclxuICAgIHJldHVybiBbLi4udGhpcy5jcmVhdHVyZXMudmFsdWVzKCldO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldEh1bnRlcnNJbkFyZWEoY2VudGVyOiBWZWN0b3IyLCByYWRpdXM6IG51bWJlcik6IEh1bnRlcltdIHtcclxuICAgIHJldHVybiB0aGlzLmdldENyZWF0dXJlc0luQXJlYShjZW50ZXIsIHJhZGl1cylcclxuICAgICAgLmZpbHRlcigoY3JlYXR1cmUpID0+IHtcclxuICAgICAgICByZXR1cm4gY3JlYXR1cmUgaW5zdGFuY2VvZiBIdW50ZXIgJiZcclxuICAgICAgICBjcmVhdHVyZS5wb3NpdGlvbi5kaXN0YW5jZShjZW50ZXIpIDwgcmFkaXVzO1xyXG4gICAgICB9KSBhcyBIdW50ZXJbXTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRCb2lkc0luQXJlYShjZW50ZXI6IFZlY3RvcjIsIHJhZGl1czogbnVtYmVyKTogQm9pZFtdIHtcclxuICAgIHJldHVybiB0aGlzLmdldENyZWF0dXJlc0luQXJlYShjZW50ZXIsIHJhZGl1cylcclxuICAgICAgLmZpbHRlcigoY3JlYXR1cmUpID0+IHtcclxuICAgICAgICByZXR1cm4gY3JlYXR1cmUgaW5zdGFuY2VvZiBCb2lkICYmXHJcbiAgICAgICAgY3JlYXR1cmUucG9zaXRpb24uZGlzdGFuY2UoY2VudGVyKSA8IHJhZGl1cztcclxuICAgICAgfSkgYXMgQm9pZFtdO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldEJvaWRzT3JQbGF5ZXJzSW5BcmVhKGNlbnRlcjogVmVjdG9yMiwgcmFkaXVzOiBudW1iZXIpOiBDcmVhdHVyZVtdIHtcclxuICAgIHJldHVybiB0aGlzLmdldENyZWF0dXJlc0luQXJlYShjZW50ZXIsIHJhZGl1cylcclxuICAgICAgLmZpbHRlcigoY3JlYXR1cmUpID0+IHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgKGNyZWF0dXJlIGluc3RhbmNlb2YgQm9pZCB8fCBjcmVhdHVyZSBpbnN0YW5jZW9mIFBsYXllckZpc2gpICYmXHJcbiAgICAgICAgICBjcmVhdHVyZS5wb3NpdGlvbi5kaXN0YW5jZShjZW50ZXIpIDwgcmFkaXVzXHJcbiAgICAgICAgKTtcclxuICAgICAgfSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0Q3JlYXR1cmVzSW5BcmVhKGNlbnRlcjogVmVjdG9yMiwgcmFkaXVzOiBudW1iZXIpOiBDcmVhdHVyZVtdIHtcclxuICAgIGNvbnN0IGJ1Y2tldFggPSBNYXRoLmZsb29yKGNlbnRlci54IC8gdGhpcy5idWNrZXRTaXplKTtcclxuICAgIGNvbnN0IGJ1Y2tldFkgPSBNYXRoLmZsb29yKGNlbnRlci55IC8gdGhpcy5idWNrZXRTaXplKTtcclxuICAgIGNvbnN0IGJ1Y2tldFJhZGl1cyA9IE1hdGguY2VpbChyYWRpdXMgLyB0aGlzLmJ1Y2tldFNpemUpO1xyXG4gICAgY29uc3QgbWluWCA9IChidWNrZXRYIC0gYnVja2V0UmFkaXVzICsgdGhpcy5idWNrZXRDb2x1bW5zKSAlIHRoaXMuYnVja2V0Q29sdW1ucztcclxuICAgIGNvbnN0IG1heFggPSAoYnVja2V0WCArIGJ1Y2tldFJhZGl1cyArIDEpICUgdGhpcy5idWNrZXRDb2x1bW5zO1xyXG4gICAgY29uc3QgbWluWSA9IChidWNrZXRZIC0gYnVja2V0UmFkaXVzICsgdGhpcy5idWNrZXRSb3dzKSAlIHRoaXMuYnVja2V0Um93cztcclxuICAgIGNvbnN0IG1heFkgPSAoYnVja2V0WSArIGJ1Y2tldFJhZGl1cyArIDEpICUgdGhpcy5idWNrZXRSb3dzO1xyXG4gICAgbGV0IGNyZWF0dXJlczogQ3JlYXR1cmVbXSA9IFtdO1xyXG4gICAgZm9yIChsZXQgaSA9IG1pblg7IGkgIT09IG1heFg7IGkrKywgaSA9IGkgJSB0aGlzLmJ1Y2tldENvbHVtbnMpIHtcclxuICAgICAgZm9yIChsZXQgaiA9IG1pblk7IGogIT09IG1heFk7IGorKywgaiA9IGogJSB0aGlzLmJ1Y2tldFJvd3MpIHtcclxuICAgICAgICBjcmVhdHVyZXMgPSBjcmVhdHVyZXMuY29uY2F0KHRoaXMuYnVja2V0TWFwW2ldW2pdKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNyZWF0dXJlcztcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRIdW50ZXJDb3VudCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0QWxsSHVudGVycygpLmxlbmd0aDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRCb2lkQ291bnQoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmdldEFsbEJvaWRzKCkubGVuZ3RoO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHJlbW92ZShjcmVhdHVyZUlkOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIHRoaXMuY3JlYXR1cmVzLmRlbGV0ZShjcmVhdHVyZUlkKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgcmVzZXRCdWNrZXRNYXAoKTogdm9pZCB7XHJcbiAgICB0aGlzLmJ1Y2tldE1hcCA9IFtdO1xyXG4gICAgdGhpcy5idWNrZXRDb2x1bW5zID0gTWF0aC5jZWlsKGNvbmZpZy5zY3JlZW4ubWF4WCAvIHRoaXMuYnVja2V0U2l6ZSk7XHJcbiAgICB0aGlzLmJ1Y2tldFJvd3MgPSBNYXRoLmNlaWwoY29uZmlnLnNjcmVlbi5tYXhZIC8gdGhpcy5idWNrZXRTaXplKTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5idWNrZXRDb2x1bW5zOyBpKyspIHtcclxuICAgICAgY29uc3QgYnVja2V0Um93OiBDcmVhdHVyZVtdW10gPSBbXTtcclxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmJ1Y2tldFJvd3M7IGorKykge1xyXG4gICAgICAgIGJ1Y2tldFJvdy5wdXNoKFtdKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLmJ1Y2tldE1hcC5wdXNoKGJ1Y2tldFJvdyk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IGNvbmZpZyB9IGZyb20gXCIuLi9jb25maWdcIjtcclxuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gXCIuLi92ZWN0b3IyXCI7XHJcbmltcG9ydCB7IENyZWF0dXJlIH0gZnJvbSBcIi4vY3JlYXR1cmVcIjtcclxuaW1wb3J0IHsgQ3JlYXR1cmVTdG9yYWdlIH0gZnJvbSBcIi4uL2NyZWF0dXJlU3RvcmFnZVwiO1xyXG5pbXBvcnQgeyBOZXQgfSBmcm9tIFwiLi4vbmV1cmFsL25ldFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEh1bnRlciBleHRlbmRzIENyZWF0dXJlIHtcclxuICBwdWJsaWMgY29sb3VyID0gY29uZmlnLmh1bnRlci5kZWZhdWx0Q29sb3VyO1xyXG4gIHB1YmxpYyBtYXhTcGVlZCA9IGNvbmZpZy5odW50ZXIubWF4U3BlZWQ7XHJcbiAgcHVibGljIG1pblNwZWVkID0gY29uZmlnLmh1bnRlci5taW5TcGVlZDtcclxuICBwdWJsaWMgc2l6ZSA9IGNvbmZpZy5odW50ZXIuc2l6ZTtcclxuICBwdWJsaWMgaGVhZGluZyA9IDA7XHJcbiAgcHVibGljIHNwZWVkID0gMDtcclxuICBwdWJsaWMgaGlzdG9yeTogVmVjdG9yMltdID0gW107XHJcbiAgcHVibGljIHBvc2l0aW9uOiBWZWN0b3IyO1xyXG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IG5ldFNpemVTY2hlbWEgPSBbMSwgMywgMl1cclxuICBwcml2YXRlIG5ldDogTmV0O1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHB1YmxpYyByZWFkb25seSBpZDogbnVtYmVyID0gMCxcclxuICAgIHB1YmxpYyBjcmVhdHVyZVN0b3JhZ2U6IENyZWF0dXJlU3RvcmFnZSxcclxuICAgIHBvc2l0aW9uPzogVmVjdG9yMixcclxuICApIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICB0aGlzLnBvc2l0aW9uID0gcG9zaXRpb24gfHwgbmV3IFZlY3RvcjIoXHJcbiAgICAgIE1hdGgucmFuZG9tKCkgKiBjb25maWcuc2NyZWVuLm1heFgsXHJcbiAgICAgIE1hdGgucmFuZG9tKCkgKiBjb25maWcuc2NyZWVuLm1heFksXHJcbiAgICApO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb25maWcuY3JlYXR1cmUubWF4SGlzdG9yeTsgaSsrKSB7XHJcbiAgICAgIHRoaXMuaGlzdG9yeS5wdXNoKHRoaXMucG9zaXRpb24pO1xyXG4gICAgfVxyXG4gICAgdGhpcy5pbml0aWFsaXplVmVsb2NpdHkoKTtcclxuICAgIHRoaXMubmV0ID0gbmV3IE5ldChIdW50ZXIubmV0U2l6ZVNjaGVtYSlcclxuICB9XHJcblxyXG4gIHB1YmxpYyBpbml0aWFsaXplVmVsb2NpdHkoKTogdm9pZCB7XHJcbiAgICB0aGlzLmhlYWRpbmcgPSBNYXRoLnJhbmRvbSgpICogMiAqIE1hdGguUEk7XHJcbiAgICB0aGlzLnNwZWVkID0gY29uZmlnLmh1bnRlci5taW5TcGVlZDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyB1cGRhdGUoKSB7XHJcbiAgICB0aGlzLmVhdCgpO1xyXG4gICAgdGhpcy5tb3ZlKCk7XHJcbiAgICB0aGlzLnVwZGF0ZUhpc3RvcnkoKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBlYXQoKSB7XHJcbiAgICB0aGlzLmNyZWF0dXJlU3RvcmFnZS5nZXRCb2lkc0luQXJlYShcclxuICAgICAgdGhpcy5wb3NpdGlvbixcclxuICAgICAgY29uZmlnLmh1bnRlci5lYXRSYWRpdXMsXHJcbiAgICApLmZvckVhY2goKHByZXkpID0+IHByZXkuZGllKCkpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG1vdmUoKSB7XHJcbiAgICB0aGlzLnVwZGF0ZUhpc3RvcnkoKTtcclxuICAgIHRoaXMucG9zaXRpb24gPSB0aGlzLnBvc2l0aW9uLmFkZCh0aGlzLnZlbG9jaXR5KCkpLm5vcm1hbGl6ZSgpO1xyXG4gICAgY29uc3QgaW5wdXRWZWN0b3IgPSB0aGlzLmdldE5ldXJhbE5ldElucHV0VmVjdG9yKCk7XHJcbiAgICBjb25zdCBvdXRwdXRWZWN0b3IgPSB0aGlzLm5ldC5wcm9jZXNzSW5wdXQoaW5wdXRWZWN0b3IpO1xyXG4gICAgdGhpcy5wYXJzZU91dHB1dFRvQWN0aW9uKG91dHB1dFZlY3Rvcik7XHJcblxyXG4gICAgLy8gVE9ETyAuLi4gdXBkYXRlIG5ldCB0byBsZWFybj9cclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0TmV1cmFsTmV0SW5wdXRWZWN0b3IoKTogbnVtYmVyW10ge1xyXG4gICAgLy8gVE9ETyB0aGlzIHdpbGwgZXJyb3IgaWYgdGhlcmUgYXJlIG5vIGJvaWRzXHJcbiAgICBjb25zdCBuZWFyZXN0Qm9pZCA9IHRoaXMuY3JlYXR1cmVTdG9yYWdlLmdldEFsbEJvaWRzKCkuc29ydCgoYSwgYikgPT4ge1xyXG4gICAgICByZXR1cm4gYS5kaXN0YW5jZVRvQ3JlYXR1cmUodGhpcykgLSBiLmRpc3RhbmNlVG9DcmVhdHVyZSh0aGlzKVxyXG4gICAgfSlbMF1cclxuXHJcbiAgICBjb25zdCBzaG9ydGVzdFBhdGggPSB0aGlzLnBvc2l0aW9uLnZlY3RvclRvKG5lYXJlc3RCb2lkLnBvc2l0aW9uKVxyXG5cclxuICAgIGNvbnN0IHRhcmdldEhlYWRpbmdSYWRpYW5zID0gdGhpcy52ZWxvY2l0eSgpLmFuZ2xlVG8oc2hvcnRlc3RQYXRoKVxyXG4gICAgY29uc3Qgbm9ybWFsaXNlZFRhcmdldCA9ICh0YXJnZXRIZWFkaW5nUmFkaWFucyAvICgyICogTWF0aC5QSSkpICsgMC41XHJcbiAgICByZXR1cm4gW25vcm1hbGlzZWRUYXJnZXRdXHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHBhcnNlT3V0cHV0VG9BY3Rpb24ob3V0cHV0VmVjdG9yOiBudW1iZXJbXSk6IHZvaWQge1xyXG4gICAgY29uc3Qgcm90YXRpb25EZWNpc2lvbiA9IG91dHB1dFZlY3RvclswXVxyXG4gICAgY29uc3QgbWF4aW11bUxlZnQgPSB0aGlzLmhlYWRpbmcgLSBjb25maWcuY3JlYXR1cmUudHVybmluZ01heFxyXG4gICAgY29uc3QgZnVsbFR1cm5pbmdSYW5nZSA9IGNvbmZpZy5jcmVhdHVyZS50dXJuaW5nTWF4ICogMlxyXG4gICAgdGhpcy5oZWFkaW5nID0gbWF4aW11bUxlZnQgKyByb3RhdGlvbkRlY2lzaW9uICogZnVsbFR1cm5pbmdSYW5nZVxyXG5cclxuICAgIGNvbnN0IGFjY2VsZXJhdGlvbkRlY2lzaW9uID0gb3V0cHV0VmVjdG9yWzFdXHJcbiAgICBjb25zdCBtaW5pbXVtU3BlZWQgPSB0aGlzLnNwZWVkIC0gY29uZmlnLmNyZWF0dXJlLmFjY2VsZXJhdGlvblxyXG4gICAgY29uc3QgZnVsbFNwZWVkUmFuZ2UgPSBjb25maWcuY3JlYXR1cmUuYWNjZWxlcmF0aW9uICogMlxyXG4gICAgY29uc3QgdGFyZ2V0U3BlZWQgPSBtaW5pbXVtU3BlZWQgKyBmdWxsU3BlZWRSYW5nZSAqIGFjY2VsZXJhdGlvbkRlY2lzaW9uXHJcbiAgICB0aGlzLnNwZWVkID0gTWF0aC5taW4oTWF0aC5tYXgodGFyZ2V0U3BlZWQsIDApLCBjb25maWcuaHVudGVyLm1heFNwZWVkKVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBMYXllciB9IGZyb20gJy4vbGF5ZXInO1xyXG5cclxuZXhwb3J0IGNsYXNzIE5ldCB7XHJcbiAgcHVibGljIGxheWVyczogTGF5ZXJbXVxyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIGxheWVyU2l6ZXM6IG51bWJlcltdLFxyXG4gICkge1xyXG4gICAgY29uc3QgaW5wdXRMYXllciA9IG5ldyBMYXllcihsYXllclNpemVzWzBdKVxyXG4gICAgdGhpcy5sYXllcnMgPSBbaW5wdXRMYXllcl1cclxuXHJcbiAgICBsZXQgcHJpb3JMYXllciA9IGlucHV0TGF5ZXJcclxuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgbGF5ZXJTaXplcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICBjb25zdCBuZXh0TGF5ZXIgPSBuZXcgTGF5ZXIobGF5ZXJTaXplc1tpXSlcclxuICAgICAgbmV4dExheWVyLmNvbm5lY3RQcmlvckxheWVyKHByaW9yTGF5ZXIpXHJcbiAgICAgIHRoaXMubGF5ZXJzLnB1c2gobmV4dExheWVyKVxyXG4gICAgICBwcmlvckxheWVyID0gbmV4dExheWVyXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgcHJvY2Vzc0lucHV0KGlucHV0VmVjdG9yOiBudW1iZXJbXSk6IG51bWJlcltdIHtcclxuICAgIHRoaXMuaW5qZWN0SW5wdXRWZWN0b3JUb0lucHV0TGF5ZXIoaW5wdXRWZWN0b3IpXHJcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IHRoaXMubGF5ZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIHRoaXMubGF5ZXJzW2ldLnVwZGF0ZVZhbHVlcygpXHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5sYXllcnNbdGhpcy5sYXllcnMubGVuZ3RoIC0gMV0ub3V0cHV0VmVjdG9yKClcclxuICB9XHJcblxyXG4gIHByaXZhdGUgaW5qZWN0SW5wdXRWZWN0b3JUb0lucHV0TGF5ZXIoaW5wdXRWZWN0b3I6IG51bWJlcltdKTogdm9pZCB7XHJcbiAgICB0aGlzLmxheWVyc1swXS5pbmplY3RJbnB1dFZlY3RvcihpbnB1dFZlY3RvcilcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgTmV1cm9uIH0gZnJvbSBcIi4vbmV1cm9uXCJcclxuXHJcbmV4cG9ydCBjbGFzcyBMYXllciB7XHJcbiAgcHVibGljIG5ldXJvbnM6IE5ldXJvbltdXHJcblxyXG4gIGNvbnN0cnVjdG9yKHNpemU6IG51bWJlcikge1xyXG4gICAgdGhpcy5uZXVyb25zID0gW11cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2l6ZTsgaSsrKSB7XHJcbiAgICAgIHRoaXMubmV1cm9ucy5wdXNoKG5ldyBOZXVyb24oKSlcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHB1YmxpYyBjb25uZWN0UHJpb3JMYXllcihwcmlvckxheWVyOiBMYXllcik6IHZvaWQge1xyXG4gICAgdGhpcy5uZXVyb25zLmZvckVhY2gobmV1cm9uID0+IHtcclxuICAgICAgcHJpb3JMYXllci5uZXVyb25zLmZvckVhY2gocHJpb3JOZXVyb24gPT4ge1xyXG4gICAgICAgIE5ldXJvbi5jb25uZWN0UGFpcihwcmlvck5ldXJvbiwgbmV1cm9uKVxyXG4gICAgICB9KVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIHB1YmxpYyBpbmplY3RJbnB1dFZlY3RvcihpbnB1dFZlY3RvcjogbnVtYmVyW10pOiB2b2lkIHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5wdXRWZWN0b3IubGVuZ3RoOyBpKyspIHtcclxuICAgICAgdGhpcy5uZXVyb25zW2ldLnZhbHVlID0gaW5wdXRWZWN0b3JbaV1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHB1YmxpYyB1cGRhdGVWYWx1ZXMoKTogdm9pZCB7XHJcbiAgICB0aGlzLm5ldXJvbnMuZm9yRWFjaChuZXVyb24gPT4gbmV1cm9uLnVwZGF0ZVZhbHVlKCkpXHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3V0cHV0VmVjdG9yKCk6IG51bWJlcltdIHtcclxuICAgIHJldHVybiB0aGlzLm5ldXJvbnMubWFwKG5ldXJvbiA9PiBuZXVyb24udmFsdWUpXHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IENvbm5lY3Rpb24gfSBmcm9tIFwiLi9jb25uZWN0aW9uXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgTmV1cm9uIHtcclxuICBwcml2YXRlIGlucHV0czogQ29ubmVjdGlvbltdO1xyXG4gIHByaXZhdGUgb3V0cHV0czogQ29ubmVjdGlvbltdO1xyXG4gIHB1YmxpYyB2YWx1ZTogbnVtYmVyO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuaW5wdXRzID0gW107XHJcbiAgICB0aGlzLm91dHB1dHMgPSBbXTtcclxuICAgIHRoaXMudmFsdWUgPSAwO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjb25uZWN0T3V0cHV0KGNvbm5lY3Rpb246IENvbm5lY3Rpb24pOiB2b2lkIHtcclxuICAgIHRoaXMub3V0cHV0cy5wdXNoKGNvbm5lY3Rpb24pXHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNvbm5lY3RJbnB1dChjb25uZWN0aW9uOiBDb25uZWN0aW9uKTogdm9pZCB7XHJcbiAgICB0aGlzLmlucHV0cy5wdXNoKGNvbm5lY3Rpb24pXHJcbiAgfVxyXG5cclxuICBzdGF0aWMgY29ubmVjdFBhaXIocHJpb3I6IE5ldXJvbiwgbmV4dDogTmV1cm9uKTogdm9pZCB7XHJcbiAgICBjb25zdCBjb25uZWN0aW9uID0gbmV3IENvbm5lY3Rpb24ocHJpb3IsIG5leHQpXHJcbiAgICBwcmlvci5jb25uZWN0T3V0cHV0KGNvbm5lY3Rpb24pXHJcbiAgICBuZXh0LmNvbm5lY3RJbnB1dChjb25uZWN0aW9uKVxyXG4gIH1cclxuXHJcbiAgLy8gQWN0aXZhdGlvbiBmdW5jdGlvblxyXG4gIHB1YmxpYyB1cGRhdGVWYWx1ZSgpOiB2b2lkIHtcclxuICAgIC8vIFRoaXMgaW1wbGVtZW50YXRpb24gaXMgdGhlIGNsYXNzaWMgc3RlcCBmdW5jdGlvblxyXG4gICAgY29uc3QgaW5wdXRTdW0gPSB0aGlzLmlucHV0cy5yZWR1Y2UoXHJcbiAgICAgIChwcmV2LCBjdXJyKSA9PiBwcmV2ICsgY3Vyci5nZXRXZWlnaHRlZE91dHB1dCgpLFxyXG4gICAgICAwXHJcbiAgICApXHJcbiAgICBjb25zdCBhdmVyYWdlSW5wdXQgPSBpbnB1dFN1bSAvIHRoaXMuaW5wdXRzLmxlbmd0aDtcclxuICAgIHRoaXMudmFsdWUgPSBhdmVyYWdlSW5wdXQgPCAwLjUgPyAwIDogMTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgTmV1cm9uIH0gZnJvbSBcIi4vbmV1cm9uXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQ29ubmVjdGlvbiB7XHJcbiAgcHJpdmF0ZSBpbnB1dDogTmV1cm9uO1xyXG4gIHByaXZhdGUgb3V0cHV0OiBOZXVyb247XHJcbiAgcHJpdmF0ZSB3ZWlnaHQ6IG51bWJlcjtcclxuXHJcbiAgY29uc3RydWN0b3IoaW5wdXQ6IE5ldXJvbiwgb3V0cHV0OiBOZXVyb24sIHdlaWdodDogbnVtYmVyID0gTWF0aC5yYW5kb20oKSAqIDIpIHtcclxuICAgIHRoaXMuaW5wdXQgPSBpbnB1dDtcclxuICAgIHRoaXMub3V0cHV0ID0gb3V0cHV0O1xyXG4gICAgdGhpcy53ZWlnaHQgPSB3ZWlnaHQ7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0V2VpZ2h0ZWRPdXRwdXQoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmlucHV0LnZhbHVlICogdGhpcy53ZWlnaHRcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgY29uZmlnIH0gZnJvbSBcIi4uL2NvbmZpZ1wiO1xyXG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSBcIi4uL3ZlY3RvcjJcIjtcclxuaW1wb3J0IHsgQmVoYXZpb3VyIH0gZnJvbSBcIi4vYmVoYXZpb3VyXCI7XHJcbmltcG9ydCB7IEJlaGF2aW91ckNvbnRyb2xsZWRDcmVhdHVyZSB9IGZyb20gXCIuL2JlaGF2aW91ckNvbnRyb2xsZWRDcmVhdHVyZVwiO1xyXG5pbXBvcnQgV2VpZ2h0ZWRWZWN0b3IyIGZyb20gXCIuLi93ZWlnaHRlZFZlY3RvcjJcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBCb2lkIGV4dGVuZHMgQmVoYXZpb3VyQ29udHJvbGxlZENyZWF0dXJlIHtcclxuICBwdWJsaWMgZGVmYXVsdENvbG91ciA9IGNvbmZpZy5ib2lkLmRlZmF1bHRDb2xvdXI7XHJcbiAgcHVibGljIG1heFNwZWVkID0gY29uZmlnLmJvaWQubWF4U3BlZWQ7XHJcbiAgcHVibGljIG1pblNwZWVkID0gY29uZmlnLmJvaWQubWluU3BlZWQ7XHJcbiAgcHVibGljIHNpemUgPSBjb25maWcuYm9pZC5zaXplO1xyXG4gIHB1YmxpYyBmZWFyQ291bnRkb3duID0gMDtcclxuICBwdWJsaWMgaGVhZGluZyA9IDIgKiBNYXRoLlBJICogTWF0aC5yYW5kb20oKTtcclxuICBwdWJsaWMgc3BlZWQgPSBjb25maWcuYm9pZC5tYXhTcGVlZDtcclxuICBwdWJsaWMgYmVoYXZpb3VycyA9IFtcclxuICAgIG5ldyBCZWhhdmlvdXIoKCkgPT4gdGhpcy5odW50ZXJFdmFzaW9uKCksICgpID0+IFwicmVkXCIpLFxyXG4gICAgbmV3IEJlaGF2aW91cigoKSA9PiB0aGlzLnJlcHVsc2lvbigpLCAoKSA9PiB0aGlzLmZlYXJDb3VudGRvd24gPyBcInJlZFwiIDogXCJvcmFuZ2VcIiksXHJcbiAgICBuZXcgQmVoYXZpb3VyKCgpID0+IHRoaXMuYWxpZ25tZW50KCksICgpID0+IHRoaXMuZmVhckNvdW50ZG93biA/IFwicmVkXCIgOiBcImJsdWVcIiksXHJcbiAgICBuZXcgQmVoYXZpb3VyKCgpID0+IHRoaXMuYXR0cmFjdGlvbigpLCAoKSA9PiB0aGlzLmZlYXJDb3VudGRvd24gPyBcInJlZFwiIDogXCJncmVlblwiKSxcclxuICBdO1xyXG5cclxuICBwdWJsaWMgaW5pdGlhbGl6ZVZlbG9jaXR5KCk6IHZvaWQge1xyXG4gICAgdGhpcy5oZWFkaW5nID0gTWF0aC5yYW5kb20oKSAqIDIgKiBNYXRoLlBJO1xyXG4gICAgdGhpcy5zcGVlZCA9IGNvbmZpZy5ib2lkLm1heFNwZWVkO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHVwZGF0ZSgpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLmZlYXJDb3VudGRvd24pIHtcclxuICAgICAgdGhpcy5mZWFyQ291bnRkb3duLS07XHJcbiAgICB9XHJcbiAgICB0aGlzLm1vdmUoKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBodW50ZXJFdmFzaW9uKCk6IFdlaWdodGVkVmVjdG9yMiB7XHJcbiAgICBjb25zdCBodW50ZXJzSW5TaWdodCA9IHRoaXMuY3JlYXR1cmVTdG9yYWdlLmdldEh1bnRlcnNJbkFyZWEoXHJcbiAgICAgIHRoaXMucG9zaXRpb24sXHJcbiAgICAgIGNvbmZpZy5ib2lkLnZpc2lvblJhZGl1cyxcclxuICAgICk7XHJcbiAgICBpZiAoaHVudGVyc0luU2lnaHQubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHJldHVybiBuZXcgV2VpZ2h0ZWRWZWN0b3IyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5mZWFyQ291bnRkb3duID0gY29uZmlnLmJvaWQuZmVhckR1cmF0aW9uO1xyXG5cclxuICAgIGNvbnN0IG5lYXJlc3RIdW50ZXIgPSB0aGlzLm5lYXJlc3RDcmVhdHVyZVRvUG9zaXRpb24oXHJcbiAgICAgIGh1bnRlcnNJblNpZ2h0LFxyXG4gICAgKTtcclxuXHJcbiAgICBjb25zdCB2ZWN0b3JUb01lID0gbmVhcmVzdEh1bnRlci5wb3NpdGlvbi52ZWN0b3JUbyh0aGlzLnBvc2l0aW9uKTtcclxuXHJcbiAgICByZXR1cm4gbmV3IFdlaWdodGVkVmVjdG9yMihcclxuICAgICAgdmVjdG9yVG9NZVxyXG4gICAgICAgIC5zY2FsZVRvTGVuZ3RoKHRoaXMubWF4U3BlZWQpLFxyXG4gICAgICAxMDAsXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHJlcHVsc2lvbigpOiBXZWlnaHRlZFZlY3RvcjIge1xyXG4gICAgY29uc3QgbmVpZ2hib3VycyA9IHRoaXMuY3JlYXR1cmVTdG9yYWdlLmdldEJvaWRzT3JQbGF5ZXJzSW5BcmVhKFxyXG4gICAgICB0aGlzLnBvc2l0aW9uLFxyXG4gICAgICBjb25maWcuYm9pZC5yZXB1bHNpb25SYWRpdXMsXHJcbiAgICApLmZpbHRlcigoYm9pZCkgPT4gYm9pZCAhPT0gdGhpcyk7XHJcbiAgICBpZiAobmVpZ2hib3Vycy5sZW5ndGggPT09IDApIHtcclxuICAgICAgcmV0dXJuIG5ldyBXZWlnaHRlZFZlY3RvcjIoKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCByZXB1bHNpb25WZWN0b3JzID0gbmVpZ2hib3Vyc1xyXG4gICAgLm1hcCgoY3JlYXR1cmUpID0+XHJcbiAgICAgIGNyZWF0dXJlLnBvc2l0aW9uLnZlY3RvclRvKHRoaXMucG9zaXRpb24pLFxyXG4gICAgKS5tYXAoKHZlY3RvcikgPT4gbmV3IFdlaWdodGVkVmVjdG9yMihcclxuICAgICAgdmVjdG9yLFxyXG4gICAgICB0aGlzLnJlcHVsc2lvbldlaWdodEZyb20odmVjdG9yKSxcclxuICAgICkpO1xyXG4gICAgY29uc3QgdG90YWxXZWlnaHQgPSByZXB1bHNpb25WZWN0b3JzLnJlZHVjZSgocGFydGlhbFdlaWdodCwgY3VycmVudCkgPT4ge1xyXG4gICAgICByZXR1cm4gcGFydGlhbFdlaWdodCArIGN1cnJlbnQud2VpZ2h0O1xyXG4gICAgfSwgMCk7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBXZWlnaHRlZFZlY3RvcjIoXHJcbiAgICAgIFdlaWdodGVkVmVjdG9yMi5hdmVyYWdlKHJlcHVsc2lvblZlY3RvcnMpLFxyXG4gICAgICB0b3RhbFdlaWdodCxcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgcmVwdWxzaW9uV2VpZ2h0RnJvbSh2ZWN0b3I6IFZlY3RvcjIpOiBudW1iZXIge1xyXG4gICAgY29uc3QgaW50cnVzaW9uID0gY29uZmlnLmJvaWQucmVwdWxzaW9uUmFkaXVzIC0gdmVjdG9yLmxlbmd0aDtcclxuICAgIGNvbnN0IG5vcm1hbGl6ZWRJbnRydXNpb24gPSBpbnRydXNpb24gLyBjb25maWcuYm9pZC5yZXB1bHNpb25SYWRpdXM7XHJcbiAgICBjb25zdCBzbW9vdGhlZEludHJ1c2lvbiA9IE1hdGgucG93KG5vcm1hbGl6ZWRJbnRydXNpb24sIDIpO1xyXG4gICAgcmV0dXJuIHNtb290aGVkSW50cnVzaW9uICogY29uZmlnLmJvaWQucmVwdWxzaW9uUmFkaXVzO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGFsaWdubWVudCgpOiBXZWlnaHRlZFZlY3RvcjIge1xyXG4gICAgY29uc3QgbmVpZ2hib3VycyA9IHRoaXMuY3JlYXR1cmVTdG9yYWdlLmdldEJvaWRzT3JQbGF5ZXJzSW5BcmVhKFxyXG4gICAgICB0aGlzLnBvc2l0aW9uLFxyXG4gICAgICBjb25maWcuYm9pZC5hbGlnbm1lbnRSYWRpdXMsXHJcbiAgICApLmZpbHRlcigoYm9pZCkgPT4gYm9pZCAhPT0gdGhpcyk7XHJcbiAgICBpZiAobmVpZ2hib3Vycy5sZW5ndGggPT09IDApIHtcclxuICAgICAgcmV0dXJuIG5ldyBXZWlnaHRlZFZlY3RvcjIoKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGF2ZXJhZ2VBbGlnbm1lbnRWZWN0b3IgPSBWZWN0b3IyLmF2ZXJhZ2UoXHJcbiAgICAgIG5laWdoYm91cnMubWFwKChjcmVhdHVyZSkgPT4ge1xyXG4gICAgICAgIHJldHVybiBjcmVhdHVyZS52ZWxvY2l0eSgpO1xyXG4gICAgICB9KSxcclxuICAgICk7XHJcbiAgICByZXR1cm4gbmV3IFdlaWdodGVkVmVjdG9yMihcclxuICAgICAgdGhpcy5mZWFyQ291bnRkb3duID9cclxuICAgICAgICBhdmVyYWdlQWxpZ25tZW50VmVjdG9yLnNjYWxlVG9MZW5ndGgodGhpcy5tYXhTcGVlZCkgOlxyXG4gICAgICAgIGF2ZXJhZ2VBbGlnbm1lbnRWZWN0b3IsXHJcbiAgICAgIDE1LFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhdHRyYWN0aW9uKCk6IFdlaWdodGVkVmVjdG9yMiB7XHJcbiAgICBjb25zdCBuZWlnaGJvdXJzID0gdGhpcy5jcmVhdHVyZVN0b3JhZ2UuZ2V0Qm9pZHNPclBsYXllcnNJbkFyZWEoXHJcbiAgICAgIHRoaXMucG9zaXRpb24sXHJcbiAgICAgIGNvbmZpZy5ib2lkLmF0dHJhY3Rpb25SYWRpdXMsXHJcbiAgICApLmZpbHRlcigoYm9pZCkgPT4gYm9pZCAhPT0gdGhpcyk7XHJcbiAgICBpZiAobmVpZ2hib3Vycy5sZW5ndGggPT09IDApIHtcclxuICAgICAgcmV0dXJuIG5ldyBXZWlnaHRlZFZlY3RvcjIoKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBuZWFyZXN0TmVpZ2hib3VyID0gdGhpcy5uZWFyZXN0Q3JlYXR1cmVUb1Bvc2l0aW9uKFxyXG4gICAgICBuZWlnaGJvdXJzLFxyXG4gICAgKTtcclxuXHJcbiAgICByZXR1cm4gbmV3IFdlaWdodGVkVmVjdG9yMihcclxuICAgICAgdGhpcy5wb3NpdGlvblxyXG4gICAgICAgIC52ZWN0b3JUbyhuZWFyZXN0TmVpZ2hib3VyLnBvc2l0aW9uKVxyXG4gICAgICAgIC5zY2FsZVRvTGVuZ3RoKFxyXG4gICAgICAgICAgdGhpcy5mZWFyQ291bnRkb3duXHJcbiAgICAgICAgICA/IHRoaXMubWF4U3BlZWRcclxuICAgICAgICAgIDogbmVhcmVzdE5laWdoYm91ci5zcGVlZCAqIDEuMSksXHJcbiAgICAgIDEwLFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBkaWUoKTogdm9pZCB7XHJcbiAgICB0aGlzLmNyZWF0dXJlU3RvcmFnZS5yZW1vdmUodGhpcy5pZCk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBXZWlnaHRlZFZlY3RvcjIgZnJvbSBcIi4uL3dlaWdodGVkVmVjdG9yMlwiO1xyXG5pbXBvcnQgeyBQcmlvcml0eSB9IGZyb20gXCIuL3ByaW9yaXR5XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQmVoYXZpb3VyIHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHB1YmxpYyBnZXRJZGVhbFdlaWdodGVkSGVhZGluZzogKCgpID0+IFdlaWdodGVkVmVjdG9yMiksXHJcbiAgICBwdWJsaWMgZ2V0Q29sb3I6ICgpID0+IHN0cmluZyxcclxuICApIHtcclxuICB9XHJcbiAgcHVibGljIGdldEN1cnJlbnRQcmlvcml0eSgpOiBQcmlvcml0eSB8IG51bGwge1xyXG4gICAgY29uc3Qgd2VpZ2h0ZWRIZWFkaW5nID0gdGhpcy5nZXRJZGVhbFdlaWdodGVkSGVhZGluZygpO1xyXG4gICAgaWYgKHdlaWdodGVkSGVhZGluZy53ZWlnaHQgPiAwKSB7XHJcbiAgICAgIHJldHVybiBuZXcgUHJpb3JpdHkoXHJcbiAgICAgICAgd2VpZ2h0ZWRIZWFkaW5nLFxyXG4gICAgICAgIHRoaXMuZ2V0Q29sb3IoKSxcclxuICAgICAgKTtcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgV2VpZ2h0ZWRWZWN0b3IyIGZyb20gXCIuLi93ZWlnaHRlZFZlY3RvcjJcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBQcmlvcml0eSB7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwdWJsaWMgd2VpZ2h0ZWRWZWN0b3I6IFdlaWdodGVkVmVjdG9yMixcclxuICAgIHB1YmxpYyBjb2xvcjogc3RyaW5nLFxyXG4gICkge31cclxufVxyXG4iLCJpbXBvcnQgeyBjb25maWcgfSBmcm9tIFwiLi4vY29uZmlnXCI7XHJcbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tIFwiLi4vdmVjdG9yMlwiO1xyXG5pbXBvcnQgeyBCZWhhdmlvdXIgfSBmcm9tIFwiLi9iZWhhdmlvdXJcIjtcclxuaW1wb3J0IHsgUHJpb3JpdHkgfSBmcm9tIFwiLi9wcmlvcml0eVwiO1xyXG5pbXBvcnQgeyBDcmVhdHVyZVN0b3JhZ2UgfSBmcm9tIFwiLi4vY3JlYXR1cmVTdG9yYWdlXCI7XHJcbmltcG9ydCB7IENyZWF0dXJlIH0gZnJvbSBcIi4vY3JlYXR1cmVcIjtcclxuaW1wb3J0IFdlaWdodGVkVmVjdG9yMiBmcm9tIFwiLi4vd2VpZ2h0ZWRWZWN0b3IyXCI7XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQmVoYXZpb3VyQ29udHJvbGxlZENyZWF0dXJlIGV4dGVuZHMgQ3JlYXR1cmUge1xyXG4gIHB1YmxpYyBhYnN0cmFjdCBkZWZhdWx0Q29sb3VyOiBzdHJpbmc7XHJcbiAgcHVibGljIGNvbG91ciA9IFwiYmxhY2tcIjtcclxuICBwdWJsaWMgYWJzdHJhY3QgYmVoYXZpb3VyczogQmVoYXZpb3VyW107XHJcbiAgcHVibGljIGFic3RyYWN0IG1heFNwZWVkOiBudW1iZXI7XHJcbiAgcHVibGljIGFic3RyYWN0IG1pblNwZWVkOiBudW1iZXI7XHJcbiAgcHVibGljIHBvc2l0aW9uOiBWZWN0b3IyO1xyXG4gIHB1YmxpYyBoaXN0b3J5OiBWZWN0b3IyW10gPSBbXTtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgaWQ6IG51bWJlciA9IDAsXHJcbiAgICBwdWJsaWMgY3JlYXR1cmVTdG9yYWdlOiBDcmVhdHVyZVN0b3JhZ2UsXHJcbiAgICBwb3NpdGlvbj86IFZlY3RvcjIsXHJcbiAgKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy5wb3NpdGlvbiA9IHBvc2l0aW9uIHx8IG5ldyBWZWN0b3IyKFxyXG4gICAgICBNYXRoLnJhbmRvbSgpICogY29uZmlnLnNjcmVlbi5tYXhYLFxyXG4gICAgICBNYXRoLnJhbmRvbSgpICogY29uZmlnLnNjcmVlbi5tYXhZLFxyXG4gICAgKTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29uZmlnLmNyZWF0dXJlLm1heEhpc3Rvcnk7IGkrKykge1xyXG4gICAgICB0aGlzLmhpc3RvcnkucHVzaCh0aGlzLnBvc2l0aW9uKTtcclxuICAgIH1cclxuICAgIHRoaXMuaW5pdGlhbGl6ZVZlbG9jaXR5KCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYWJzdHJhY3QgaW5pdGlhbGl6ZVZlbG9jaXR5KCk6IHZvaWQ7XHJcblxyXG4gIHB1YmxpYyBkaXN0YW5jZVRvQ3JlYXR1cmUoY3JlYXR1cmU6IENyZWF0dXJlKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLnBvc2l0aW9uLmRpc3RhbmNlKGNyZWF0dXJlLnBvc2l0aW9uKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhYnN0cmFjdCB1cGRhdGUoKTogdm9pZDtcclxuXHJcbiAgcHVibGljIG1vdmUoKSB7XHJcbiAgICB0aGlzLnVwZGF0ZUhpc3RvcnkoKTtcclxuICAgIHRoaXMucG9zaXRpb24gPSB0aGlzLnBvc2l0aW9uLmFkZCh0aGlzLnZlbG9jaXR5KCkpLm5vcm1hbGl6ZSgpO1xyXG4gICAgdGhpcy51cGRhdGVIZWFkaW5nKCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgdXBkYXRlSGVhZGluZygpOiB2b2lkIHtcclxuICAgIGNvbnN0IHByaW9yaXRpZXMgPSB0aGlzLmdldEN1cnJlbnRQcmlvcml0aWVzKCkuc29ydCgoYSwgYikgPT4gYi53ZWlnaHRlZFZlY3Rvci53ZWlnaHQgLSBhLndlaWdodGVkVmVjdG9yLndlaWdodCk7XHJcbiAgICBpZiAocHJpb3JpdGllcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgdGhpcy5kZWZhdWx0QmVoYXZpb3VyKCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRoaXMuY29sb3VyID0gcHJpb3JpdGllc1swXS5jb2xvcjtcclxuICAgIHRoaXMudXBkYXRlSGVhZGluZ1Rvd2FyZHMoV2VpZ2h0ZWRWZWN0b3IyLmF2ZXJhZ2UocHJpb3JpdGllcy5tYXAoKHByaW9yaXR5KSA9PiBwcmlvcml0eS53ZWlnaHRlZFZlY3RvcikpKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRDdXJyZW50UHJpb3JpdGllcygpOiBQcmlvcml0eVtdIHtcclxuICAgIHJldHVybiB0aGlzLmJlaGF2aW91cnNcclxuICAgICAgLm1hcCgoYmVoYXZpb3VyKSA9PiBiZWhhdmlvdXIuZ2V0Q3VycmVudFByaW9yaXR5KCkpXHJcbiAgICAgIC5maWx0ZXIoKHByaW9yaXR5KSA9PlxyXG4gICAgICAgIHByaW9yaXR5ICYmXHJcbiAgICAgICAgcHJpb3JpdHkud2VpZ2h0ZWRWZWN0b3IudmVjdG9yLmxlbmd0aCAmJiBwcmlvcml0eS53ZWlnaHRlZFZlY3Rvci53ZWlnaHQsXHJcbiAgICApIGFzIFByaW9yaXR5W107XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZGVmYXVsdEJlaGF2aW91cigpOiB2b2lkIHtcclxuICAgIHRoaXMuY29sb3VyID0gdGhpcy5kZWZhdWx0Q29sb3VyO1xyXG4gICAgdGhpcy5zcGVlZCA9IE1hdGgubWF4KHRoaXMudmVsb2NpdHkubGVuZ3RoIC0gY29uZmlnLmNyZWF0dXJlLmFjY2VsZXJhdGlvbiwgdGhpcy5taW5TcGVlZCk7XHJcbiAgICBjb25zdCByYW5kb21UdXJuID0gMiAqIGNvbmZpZy5jcmVhdHVyZS50dXJuaW5nTWF4ICogTWF0aC5yYW5kb20oKSAtIGNvbmZpZy5jcmVhdHVyZS50dXJuaW5nTWF4O1xyXG4gICAgdGhpcy5oZWFkaW5nID0gdGhpcy5oZWFkaW5nICsgcmFuZG9tVHVybjtcclxuICB9XHJcblxyXG4gIHB1YmxpYyB1cGRhdGVIZWFkaW5nVG93YXJkcyh2ZWN0b3I6IFZlY3RvcjIgfCBudWxsKSB7XHJcbiAgICBpZiAoIXZlY3Rvcikge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBsZXQgbGltaXRlZFNwZWVkID0gTWF0aC5tYXgoTWF0aC5taW4odmVjdG9yLmxlbmd0aCwgdGhpcy5tYXhTcGVlZCksIHRoaXMubWluU3BlZWQpO1xyXG4gICAgbGltaXRlZFNwZWVkID0gTWF0aC5tYXgoXHJcbiAgICAgIE1hdGgubWluKFxyXG4gICAgICAgIGxpbWl0ZWRTcGVlZCxcclxuICAgICAgICB0aGlzLnNwZWVkICsgY29uZmlnLmNyZWF0dXJlLmFjY2VsZXJhdGlvbiksXHJcbiAgICAgIHRoaXMuc3BlZWQgLSBjb25maWcuY3JlYXR1cmUuYWNjZWxlcmF0aW9uKTtcclxuICAgIHRoaXMuc3BlZWQgPSBsaW1pdGVkU3BlZWQ7XHJcblxyXG4gICAgY29uc3QgaWRlYWxUdXJuID0gdGhpcy52ZWxvY2l0eSgpLmFuZ2xlVG8odmVjdG9yKTtcclxuICAgIGNvbnN0IGxpbWl0ZWRUdXJuID0gTWF0aC5tYXgoXHJcbiAgICAgIE1hdGgubWluKGlkZWFsVHVybiwgY29uZmlnLmNyZWF0dXJlLnR1cm5pbmdNYXgpLFxyXG4gICAgICAtY29uZmlnLmNyZWF0dXJlLnR1cm5pbmdNYXgsXHJcbiAgICApO1xyXG5cclxuICAgIHRoaXMuaGVhZGluZyA9IHRoaXMuaGVhZGluZ1xyXG4gICAgICArIGxpbWl0ZWRUdXJuXHJcbiAgICAgICsgMiAqIGNvbmZpZy5jcmVhdHVyZS5oZWFkaW5nRnV6eiAqIE1hdGgucmFuZG9tKCkgLSBjb25maWcuY3JlYXR1cmUuaGVhZGluZ0Z1eno7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgbmVhcmVzdENyZWF0dXJlVG9Qb3NpdGlvbihjcmVhdHVyZXM6IENyZWF0dXJlW10pOiBDcmVhdHVyZSB7XHJcbiAgICBpZiAoY3JlYXR1cmVzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOZWFyZXN0IGNyZWF0dXJlIGlzIHVuZGVmaW5lZCBmb3IgemVybyBjcmVhdHVyZXNcIik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY3JlYXR1cmVzLnJlZHVjZSgocHJldmlvdXMsIGN1cnJlbnQpID0+IHtcclxuICAgICAgY29uc3QgY3VycmVudERpc3RhbmNlID0gdGhpcy5wb3NpdGlvbi52ZWN0b3JUbyhjdXJyZW50LnBvc2l0aW9uKS5sZW5ndGg7XHJcbiAgICAgIGlmIChwcmV2aW91cy5kaXN0YW5jZSA+IGN1cnJlbnREaXN0YW5jZSkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICBkaXN0YW5jZTogY3VycmVudERpc3RhbmNlLFxyXG4gICAgICAgICAgbmVhcmVzdDogY3VycmVudCxcclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBwcmV2aW91cztcclxuICAgIH0sIHtcclxuICAgICAgZGlzdGFuY2U6IHRoaXMucG9zaXRpb24udmVjdG9yVG8oY3JlYXR1cmVzWzBdLnBvc2l0aW9uKS5sZW5ndGgsXHJcbiAgICAgIG5lYXJlc3Q6IGNyZWF0dXJlc1swXSxcclxuICAgIH0pLm5lYXJlc3Q7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYWJzdHJhY3QgZGllKCk6IHZvaWQ7XHJcbn1cclxuIiwiaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gXCIuLi92ZWN0b3IyXCI7XHJcbmltcG9ydCB7IElucHV0SGFuZGxlciB9IGZyb20gXCIuLi9pbnB1dEhhbmRsZXJcIjtcclxuaW1wb3J0IHsgQ3JlYXR1cmUgfSBmcm9tIFwiLi9jcmVhdHVyZVwiO1xyXG5pbXBvcnQgeyBjb25maWcgfSBmcm9tIFwiLi4vY29uZmlnXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQbGF5ZXJGaXNoIGV4dGVuZHMgQ3JlYXR1cmUge1xyXG4gIHB1YmxpYyBjb2xvdXIgPSBcImJsYWNrXCI7XHJcbiAgcHVibGljIHNpemUgPSA2O1xyXG4gIHB1YmxpYyBwb3NpdGlvbjogVmVjdG9yMjtcclxuICBwdWJsaWMgaGVhZGluZyA9IDA7XHJcbiAgcHVibGljIHNwZWVkID0gMDtcclxuICBwdWJsaWMgaGlzdG9yeTogVmVjdG9yMltdID0gW107XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHVibGljIGlucHV0SGFuZGxlcjogSW5wdXRIYW5kbGVyLFxyXG4gICkge1xyXG4gICAgc3VwZXIoKTtcclxuICAgIHRoaXMucG9zaXRpb24gPSBuZXcgVmVjdG9yMihcclxuICAgICAgd2luZG93LmlubmVyV2lkdGggLyAyLFxyXG4gICAgICB3aW5kb3cuaW5uZXJIZWlnaHQgLyAyLFxyXG4gICAgKTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29uZmlnLmNyZWF0dXJlLm1heEhpc3Rvcnk7IGkrKykge1xyXG4gICAgICB0aGlzLmhpc3RvcnkucHVzaCh0aGlzLnBvc2l0aW9uKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHB1YmxpYyB1cGRhdGUoKSB7XHJcbiAgICB0aGlzLnVwZGF0ZUhpc3RvcnkoKTtcclxuICAgIHRoaXMuaGVhZGluZyArPSB0aGlzLmlucHV0SGFuZGxlci5nZXRIZWFkaW5nVXBkYXRlKCk7XHJcbiAgICB0aGlzLnNwZWVkICs9IHRoaXMuaW5wdXRIYW5kbGVyLmdldFNwZWVkVXBkYXRlKCk7XHJcbiAgICB0aGlzLnNwZWVkID0gTWF0aC5tYXgoXHJcbiAgICAgIE1hdGgubWluKFxyXG4gICAgICAgIHRoaXMuc3BlZWQsXHJcbiAgICAgICAgY29uZmlnLnBsYXllci5tYXhTcGVlZCxcclxuICAgICAgKSxcclxuICAgICAgY29uZmlnLnBsYXllci5taW5TcGVlZCxcclxuICAgICk7XHJcbiAgICB0aGlzLnBvc2l0aW9uID0gdGhpcy5wb3NpdGlvblxyXG4gICAgICAuYWRkKHRoaXMudmVsb2NpdHkoKSkubm9ybWFsaXplKCk7XHJcbiAgfVxyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=