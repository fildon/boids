!function(t){var e={};function i(n){if(e[n])return e[n].exports;var s=e[n]={i:n,l:!1,exports:{}};return t[n].call(s.exports,s,s.exports,i),s.l=!0,s.exports}i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)i.d(n,s,function(e){return t[e]}.bind(null,s));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=4)}([function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.config=void 0,e.config={boid:{alignmentRadius:40,alignmentRadiusDefault:40,attractionRadius:200,attractionRadiusDefault:200,defaultColour:"LightSteelBlue",fearDuration:30,maxSpeed:6,minSpeed:3,quantity:100,repulsionRadius:30,repulsionRadiusDefault:30,size:4,visionRadius:200},creature:{acceleration:.2,headingFuzz:.05,maxHistory:5,turningMax:.2},hunter:{defaultColour:"pink",eatRadius:20,maxSpeed:5,minSpeed:0,quantity:1,size:8,visionRadius:90},player:{maxSpeed:64,minSpeed:0},screen:{maxX:1e3,maxY:1e3}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Vector2=void 0;const n=i(0);class s{constructor(t=0,e=0){this.x=t%n.config.screen.maxX,this.y=e%n.config.screen.maxY,this.length=Math.sqrt(Math.pow(this.x,2)+Math.pow(this.y,2))}static average(t){if(0===t.length)return new s;return t.reduce((t,e)=>t.add(e)).scaleByScalar(1/t.length)}static fromHeadingAndSpeed(t,e){return e?new s(e*Math.cos(t),e*Math.sin(t)):new s(0,0)}unitVector(){return this.scaleByScalar(1/this.length)}distance(t){return this.vectorTo(t).length}vectorTo(t){let e=(t.x-this.x)%n.config.screen.maxX;e>n.config.screen.maxX/2&&(e-=n.config.screen.maxX),e<-n.config.screen.maxX/2&&(e+=n.config.screen.maxX);let i=(t.y-this.y)%n.config.screen.maxY;return i>n.config.screen.maxY/2&&(i-=n.config.screen.maxY),i<-n.config.screen.maxY/2&&(i+=n.config.screen.maxY),new s(e,i)}rotate(t){return new s(this.x*Math.cos(t)-this.y*Math.sin(t),this.x*Math.sin(t)+this.y*Math.cos(t))}angleTo(t){return Math.atan2(this.x*t.y-this.y*t.x,this.x*t.x+this.y*t.y)}add(t){return new s(this.x+t.x,this.y+t.y)}subtract(t){return new s(this.x-t.x,this.y-t.y)}equals(t){return this.x===t.x&&this.y===t.y}scaleByScalar(t){return new s(this.x*t,this.y*t)}scaleToLength(t){return this.length?this.scaleByScalar(t/this.length):this}isParallelTo(t){return this.x*t.y==this.y*t.x}normalize(){return 0<=this.x&&0<=this.y?this:new s((this.x%n.config.screen.maxX+n.config.screen.maxX)%n.config.screen.maxX,(this.y%n.config.screen.maxY+n.config.screen.maxY)%n.config.screen.maxY)}toHeading(){return Math.atan2(this.y,this.x)}toString(){return`[${this.x}, ${this.y}]`}}e.Vector2=s},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Creature=void 0;const n=i(1);e.Creature=class{distanceToCreature(t){return this.position.distance(t.position)}updateHistory(){this.history.push(this.position),this.history=this.history.slice(1)}velocity(){return n.Vector2.fromHeadingAndSpeed(this.heading,this.speed)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=i(1);e.default=class{constructor(t=new n.Vector2,e=0){this.vector=t,this.weight=e}static average(t){if(0===t.length)return new n.Vector2;const e=t.reduce((t,e)=>({vector:t.vector.add(e.vector.scaleByScalar(e.weight)),weight:t.weight+e.weight}),{vector:new n.Vector2,weight:0});return e.vector.scaleByScalar(1/e.weight)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=i(5);document.addEventListener("DOMContentLoaded",()=>{(new n.SimulationManager).runSimulation()},!1)},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SimulationManager=void 0;const n=i(6),s=i(0),r=i(8),o=i(9);e.SimulationManager=class{constructor(){this.fpsTarget=60;const t=document.getElementById("canvas");if(!t)throw new Error("couldn't find 'canvas' on document");this.canvas=new n.Canvas(t),this.inputHandler=new r.InputHandler(this.canvas,t=>this.createBoid(t),t=>this.createHunter(t)),this.creatureStorage=new o.CreatureStorage(this.inputHandler);for(let t=0;t<s.config.boid.quantity;t++)this.creatureStorage.addBoid();for(let t=0;t<s.config.hunter.quantity;t++)this.creatureStorage.addHunter()}createBoid(t){this.creatureStorage.addBoid(t)}createHunter(t){this.creatureStorage.addHunter(t)}runSimulation(){this.tick(performance.now(),0)}tick(t,e){const i=performance.now(),n=i-t;for(t=i,e+=n;e>=1e3/this.fpsTarget;)this.updateSimulation(),e-=1e3/this.fpsTarget;this.renderSimulation(),setTimeout(()=>this.tick(t,e),0)}updateSimulation(){this.creatureStorage.update();for(const t of this.creatureStorage.getAllBoids())t.update();for(const t of this.creatureStorage.getAllHunters())t.update()}renderSimulation(){this.canvas.draw(this.creatureStorage.getAllCreatures()),this.updateHunterCountDisplay(this.creatureStorage.getHunterCount()),this.updateBoidCountDisplay(this.creatureStorage.getBoidCount())}updateHunterCountDisplay(t){const e=document.getElementById("number-of-hunters");e&&(e.textContent=""+t)}updateBoidCountDisplay(t){const e=document.getElementById("number-of-boids");e&&(e.textContent=""+t)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Canvas=void 0;const n=i(0),s=i(1),r=i(7);e.Canvas=class{constructor(t){this.fpsCounter=r.FpsCounter.getFpsCounter(),this.cameraPosition=new s.Vector2(window.innerWidth,window.innerHeight),this.canvas=t;const e=this.canvas.getContext("2d");if(!e)throw new Error("could not get canvas context");this.ctx=e,this.canvas.height=n.config.screen.maxY,this.canvas.width=n.config.screen.maxX,this.setScreenSize()}onclick(t){this.canvas.onclick=t}setScreenSize(){window&&(n.config.screen.maxX=window.innerWidth,n.config.screen.maxY=window.innerHeight),this.ctx.canvas.width=n.config.screen.maxX,this.ctx.canvas.height=n.config.screen.maxY}draw(t,e=new s.Vector2(window.innerWidth/2,window.innerHeight/2)){this.cameraPosition=e,this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.setScreenSize(),this.drawGhosts(t),t.forEach(t=>{this.drawCreature(t)}),this.fpsCounter.countFrame(),this.fpsCounter.updateFps()}drawGhosts(t){if(n.config.creature.maxHistory)for(let e=0;e<n.config.creature.maxHistory;e++)t.forEach(t=>{this.drawGhost(t,e)})}drawGhost(t,e){this.drawCreatureBody(t,e)}drawCreature(t){this.drawCreatureBody(t),this.drawCreatureBeak(t)}getPositionInCameraSpace(t){return t.add(new s.Vector2(window.innerWidth/2,window.innerHeight/2)).subtract(this.cameraPosition).normalize()}getPositionInWorldSpace(t){return t.subtract(new s.Vector2(window.innerWidth/2,window.innerHeight/2)).add(this.cameraPosition).normalize()}drawCreatureBody(t,e){let i=e?t.history[e]:t.position;i=this.getPositionInCameraSpace(i);const s=e?t.size*((e+1)/(n.config.creature.maxHistory+1)):t.size;this.ctx.beginPath(),this.ctx.arc(i.x,i.y,s,0,2*Math.PI),this.ctx.fillStyle=t.colour,this.ctx.fill()}drawCreatureBeak(t){const e=this.getPositionInCameraSpace(t.position);this.ctx.beginPath(),this.ctx.arc(e.x+(t.size+1)*Math.cos(t.heading),e.y+(t.size+1)*Math.sin(t.heading),t.size/2,0,2*Math.PI),this.ctx.fillStyle="black",this.ctx.fill()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.FpsCounter=void 0;class n{constructor(){this.SECOND=1e3,this.recentFrames=[],this.fpsLabel=document.getElementById("fps-status"),this.start=performance.now()}static getFpsCounter(){return this.fpsCounter||(this.fpsCounter=new n)}countFrame(){this.recentFrames.push(performance.now())}getFPS(){const t=performance.now(),e=t-this.start<this.SECOND?Math.floor(1e3/(t-this.start)):1;return this.recentFrames.filter(e=>e>=t-this.SECOND).length*e}updateFps(){this.fpsLabel.textContent=this.getFPS().toString()}}e.FpsCounter=n},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.InputHandler=void 0;const n=i(1),s=i(0);e.InputHandler=class{constructor(t,e,i){this.left=!1,this.right=!1,this.up=!1,this.down=!1,this.canvas=t,this.createBoid=e,this.createHunter=i,this.separationLabel=document.getElementById("separation-status"),this.alignmentLabel=document.getElementById("alignment-status"),this.cohesionLabel=document.getElementById("cohesion-status"),this.canvas.onclick(t=>{this.handleMouseClick(t)}),window.addEventListener("keyup",t=>{this.handleKeyUp(t)}),window.addEventListener("keyup",t=>{this.setArrow(t.key,!1)}),window.addEventListener("keydown",t=>{this.setArrow(t.key,!0)})}handleMouseClick(t){const e=this.canvas.getPositionInWorldSpace(new n.Vector2(t.clientX,t.clientY));t.ctrlKey||t.metaKey?this.createHunter(e):this.createBoid(e)}handleKeyUp(t){switch(t.keyCode){case 49:this.toggleSeparation();break;case 50:this.toggleAlignment();break;case 51:this.toggleCohesion();break;default:return}}toggleSeparation(){s.config.boid.repulsionRadius?(s.config.boid.repulsionRadius=0,this.separationLabel.textContent="OFF",this.separationLabel.style.color="red"):(s.config.boid.repulsionRadius=s.config.boid.repulsionRadiusDefault,this.separationLabel.textContent="ON",this.separationLabel.style.color="green")}toggleAlignment(){s.config.boid.alignmentRadius?(s.config.boid.alignmentRadius=0,this.alignmentLabel.textContent="OFF",this.alignmentLabel.style.color="red"):(s.config.boid.alignmentRadius=s.config.boid.alignmentRadiusDefault,this.alignmentLabel.textContent="ON",this.alignmentLabel.style.color="green")}toggleCohesion(){s.config.boid.attractionRadius?(s.config.boid.attractionRadius=0,this.cohesionLabel.textContent="OFF",this.cohesionLabel.style.color="red"):(s.config.boid.attractionRadius=s.config.boid.attractionRadiusDefault,this.cohesionLabel.textContent="ON",this.cohesionLabel.style.color="green")}getHeadingUpdate(){return.1*(+this.right-+this.left)}getSpeedUpdate(){return.5*(+this.up-+this.down)}setArrow(t,e){switch(t){case"ArrowLeft":this.left=e;break;case"ArrowRight":this.right=e;break;case"ArrowUp":this.up=e;break;case"ArrowDown":this.down=e;break;default:return}}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CreatureStorage=void 0;const n=i(10),s=i(15),r=i(0),o=i(19);e.CreatureStorage=class{constructor(t){this.inputHandler=t,this.nextId=0,this.creatures=new Map,this.bucketMap=[],this.bucketColumns=1,this.bucketRows=1,this.bucketSize=100,this.update()}update(){this.resetBucketMap(),this.creatures.forEach(t=>{const e=Math.min(Math.floor(t.position.x/this.bucketSize),this.bucketColumns-1),i=Math.min(Math.floor(t.position.y/this.bucketSize),this.bucketRows-1);this.bucketMap[e][i].push(t)})}addHunter(t){const e=new n.Hunter(this.nextId,this,t);return this.creatures.set(this.nextId,e),this.nextId++,e}addBoid(t){const e=new s.Boid(this.nextId,this,t);return this.creatures.set(this.nextId,e),this.nextId++,e}addPlayerFish(){const t=new o.default(this.inputHandler);return this.creatures.set(this.nextId,t),this.nextId++,t}getAllHunters(){return[...this.creatures.values()].filter(t=>t instanceof n.Hunter)}getAllBoids(){return[...this.creatures.values()].filter(t=>t instanceof s.Boid)}getAllCreatures(){return[...this.creatures.values()]}getHuntersInArea(t,e){return this.getCreaturesInArea(t,e).filter(i=>i instanceof n.Hunter&&i.position.distance(t)<e)}getBoidsInArea(t,e){return this.getCreaturesInArea(t,e).filter(i=>i instanceof s.Boid&&i.position.distance(t)<e)}getBoidsOrPlayersInArea(t,e){return this.getCreaturesInArea(t,e).filter(i=>(i instanceof s.Boid||i instanceof o.default)&&i.position.distance(t)<e)}getCreaturesInArea(t,e){const i=Math.floor(t.x/this.bucketSize),n=Math.floor(t.y/this.bucketSize),s=Math.ceil(e/this.bucketSize),r=(i-s+this.bucketColumns)%this.bucketColumns,o=(i+s+1)%this.bucketColumns,a=(n-s+this.bucketRows)%this.bucketRows,c=(n+s+1)%this.bucketRows;let u=[];for(let t=r;t!==o;t++,t%=this.bucketColumns)for(let e=a;e!==c;e++,e%=this.bucketRows)u=u.concat(this.bucketMap[t][e]);return u}getHunterCount(){return this.getAllHunters().length}getBoidCount(){return this.getAllBoids().length}remove(t){this.creatures.delete(t)}resetBucketMap(){this.bucketMap=[],this.bucketColumns=Math.ceil(r.config.screen.maxX/this.bucketSize),this.bucketRows=Math.ceil(r.config.screen.maxY/this.bucketSize);for(let t=0;t<this.bucketColumns;t++){const t=[];for(let e=0;e<this.bucketRows;e++)t.push([]);this.bucketMap.push(t)}}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Hunter=void 0;const n=i(0),s=i(1),r=i(2),o=i(11);let a=(()=>{class t extends r.Creature{constructor(e=0,i,r){super(),this.id=e,this.creatureStorage=i,this.colour=n.config.hunter.defaultColour,this.maxSpeed=n.config.hunter.maxSpeed,this.minSpeed=n.config.hunter.minSpeed,this.size=n.config.hunter.size,this.heading=0,this.speed=0,this.history=[],this.position=r||new s.Vector2(Math.random()*n.config.screen.maxX,Math.random()*n.config.screen.maxY);for(let t=0;t<n.config.creature.maxHistory;t++)this.history.push(this.position);this.initializeVelocity(),this.net=new o.Net(t.netSizeSchema)}initializeVelocity(){this.heading=2*Math.random()*Math.PI,this.speed=n.config.hunter.minSpeed}update(){this.eat(),this.move(),this.updateHistory()}eat(){this.creatureStorage.getBoidsInArea(this.position,n.config.hunter.eatRadius).forEach(t=>t.die())}move(){this.updateHistory(),this.position=this.position.add(this.velocity()).normalize();const t=this.getNeuralNetInputVector(),e=this.net.processInput(t);this.parseOutputToAction(e)}getNeuralNetInputVector(){const t=this.creatureStorage.getAllBoids().sort((t,e)=>t.distanceToCreature(this)-e.distanceToCreature(this))[0],e=this.position.vectorTo(t.position);return[this.velocity().angleTo(e)/(2*Math.PI)+.5]}parseOutputToAction(t){const e=t[0],i=this.heading-n.config.creature.turningMax,s=2*n.config.creature.turningMax;this.heading=i+e*s;const r=t[1],o=this.speed-n.config.creature.acceleration+2*n.config.creature.acceleration*r;this.speed=Math.min(Math.max(o,0),n.config.hunter.maxSpeed)}}return t.netSizeSchema=[1,3,2],t})();e.Hunter=a},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Net=void 0;const n=i(12);e.Net=class{constructor(t){const e=new n.Layer(t[0]);this.layers=[e];let i=e;for(let e=1;e<t.length;e++){const s=new n.Layer(t[e]);s.connectPriorLayer(i),this.layers.push(s),i=s}}processInput(t){this.injectInputVectorToInputLayer(t);for(let t=1;t<this.layers.length;t++)this.layers[t].updateValues();return this.layers[this.layers.length-1].outputVector()}injectInputVectorToInputLayer(t){this.layers[0].injectInputVector(t)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Layer=void 0;const n=i(13);e.Layer=class{constructor(t){this.neurons=[];for(let e=0;e<t;e++)this.neurons.push(new n.Neuron)}connectPriorLayer(t){this.neurons.forEach(e=>{t.neurons.forEach(t=>{n.Neuron.connectPair(t,e)})})}injectInputVector(t){for(let e=0;e<t.length;e++)this.neurons[e].value=t[e]}updateValues(){this.neurons.forEach(t=>t.updateValue())}outputVector(){return this.neurons.map(t=>t.value)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Neuron=void 0;const n=i(14);e.Neuron=class{constructor(){this.inputs=[],this.outputs=[],this.value=0}connectOutput(t){this.outputs.push(t)}connectInput(t){this.inputs.push(t)}static connectPair(t,e){const i=new n.Connection(t,e);t.connectOutput(i),e.connectInput(i)}updateValue(){const t=this.inputs.reduce((t,e)=>t+e.getWeightedOutput(),0)/this.inputs.length;this.value=t<.5?0:1}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Connection=void 0;e.Connection=class{constructor(t,e,i=2*Math.random()){this.input=t,this.output=e,this.weight=i}getWeightedOutput(){return this.input.value*this.weight}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Boid=void 0;const n=i(0),s=i(1),r=i(16),o=i(18),a=i(3);class c extends o.BehaviourControlledCreature{constructor(){super(...arguments),this.defaultColour=n.config.boid.defaultColour,this.maxSpeed=n.config.boid.maxSpeed,this.minSpeed=n.config.boid.minSpeed,this.size=n.config.boid.size,this.fearCountdown=0,this.heading=2*Math.PI*Math.random(),this.speed=n.config.boid.maxSpeed,this.behaviours=[new r.Behaviour(()=>this.hunterEvasion(),()=>"red"),new r.Behaviour(()=>this.repulsion(),()=>this.fearCountdown?"red":"orange"),new r.Behaviour(()=>this.alignment(),()=>this.fearCountdown?"red":"blue"),new r.Behaviour(()=>this.attraction(),()=>this.fearCountdown?"red":"green")]}initializeVelocity(){this.heading=2*Math.random()*Math.PI,this.speed=n.config.boid.maxSpeed}update(){this.fearCountdown&&this.fearCountdown--,this.move()}hunterEvasion(){const t=this.creatureStorage.getHuntersInArea(this.position,n.config.boid.visionRadius);if(0===t.length)return new a.default;this.fearCountdown=n.config.boid.fearDuration;const e=this.nearestCreatureToPosition(t).position.vectorTo(this.position);return new a.default(e.scaleToLength(this.maxSpeed),100)}repulsion(){const t=this.creatureStorage.getBoidsOrPlayersInArea(this.position,n.config.boid.repulsionRadius).filter(t=>t!==this);if(0===t.length)return new a.default;const e=t.map(t=>t.position.vectorTo(this.position)).map(t=>new a.default(t,this.repulsionWeightFrom(t))),i=e.reduce((t,e)=>t+e.weight,0);return new a.default(a.default.average(e),i)}repulsionWeightFrom(t){const e=(n.config.boid.repulsionRadius-t.length)/n.config.boid.repulsionRadius;return Math.pow(e,2)*n.config.boid.repulsionRadius}alignment(){const t=this.creatureStorage.getBoidsOrPlayersInArea(this.position,n.config.boid.alignmentRadius).filter(t=>t!==this);if(0===t.length)return new a.default;const e=s.Vector2.average(t.map(t=>t.velocity()));return new a.default(this.fearCountdown?e.scaleToLength(this.maxSpeed):e,15)}attraction(){const t=this.creatureStorage.getBoidsOrPlayersInArea(this.position,n.config.boid.attractionRadius).filter(t=>t!==this);if(0===t.length)return new a.default;const e=this.nearestCreatureToPosition(t);return new a.default(this.position.vectorTo(e.position).scaleToLength(this.fearCountdown?this.maxSpeed:1.1*e.speed),10)}die(){this.creatureStorage.remove(this.id)}}e.Boid=c},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Behaviour=void 0;const n=i(17);e.Behaviour=class{constructor(t,e){this.getIdealWeightedHeading=t,this.getColor=e}getCurrentPriority(){const t=this.getIdealWeightedHeading();return t.weight>0?new n.Priority(t,this.getColor()):null}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Priority=void 0;e.Priority=class{constructor(t,e){this.weightedVector=t,this.color=e}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BehaviourControlledCreature=void 0;const n=i(0),s=i(1),r=i(2),o=i(3);class a extends r.Creature{constructor(t=0,e,i){super(),this.id=t,this.creatureStorage=e,this.colour="black",this.history=[],this.position=i||new s.Vector2(Math.random()*n.config.screen.maxX,Math.random()*n.config.screen.maxY);for(let t=0;t<n.config.creature.maxHistory;t++)this.history.push(this.position);this.initializeVelocity()}distanceToCreature(t){return this.position.distance(t.position)}move(){this.updateHistory(),this.position=this.position.add(this.velocity()).normalize(),this.updateHeading()}updateHeading(){const t=this.getCurrentPriorities().sort((t,e)=>e.weightedVector.weight-t.weightedVector.weight);0!==t.length?(this.colour=t[0].color,this.updateHeadingTowards(o.default.average(t.map(t=>t.weightedVector)))):this.defaultBehaviour()}getCurrentPriorities(){return this.behaviours.map(t=>t.getCurrentPriority()).filter(t=>t&&t.weightedVector.vector.length&&t.weightedVector.weight)}defaultBehaviour(){this.colour=this.defaultColour,this.speed=Math.max(this.velocity.length-n.config.creature.acceleration,this.minSpeed);const t=2*n.config.creature.turningMax*Math.random()-n.config.creature.turningMax;this.heading=this.heading+t}updateHeadingTowards(t){if(!t)return;let e=Math.max(Math.min(t.length,this.maxSpeed),this.minSpeed);e=Math.max(Math.min(e,this.speed+n.config.creature.acceleration),this.speed-n.config.creature.acceleration),this.speed=e;const i=this.velocity().angleTo(t),s=Math.max(Math.min(i,n.config.creature.turningMax),-n.config.creature.turningMax);this.heading=this.heading+s+2*n.config.creature.headingFuzz*Math.random()-n.config.creature.headingFuzz}nearestCreatureToPosition(t){if(0===t.length)throw new Error("Nearest creature is undefined for zero creatures");return t.reduce((t,e)=>{const i=this.position.vectorTo(e.position).length;return t.distance>i?{distance:i,nearest:e}:t},{distance:this.position.vectorTo(t[0].position).length,nearest:t[0]}).nearest}}e.BehaviourControlledCreature=a},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=i(1),s=i(2),r=i(0);class o extends s.Creature{constructor(t){super(),this.inputHandler=t,this.colour="black",this.size=6,this.heading=0,this.speed=0,this.history=[],this.position=new n.Vector2(window.innerWidth/2,window.innerHeight/2);for(let t=0;t<r.config.creature.maxHistory;t++)this.history.push(this.position)}update(){this.updateHistory(),this.heading+=this.inputHandler.getHeadingUpdate(),this.speed+=this.inputHandler.getSpeedUpdate(),this.speed=Math.max(Math.min(this.speed,r.config.player.maxSpeed),r.config.player.minSpeed),this.position=this.position.add(this.velocity()).normalize()}}e.default=o}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,